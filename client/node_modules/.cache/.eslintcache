[{"/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/index.js":"1","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/App.tsx":"2","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/slices/index.tsx":"3","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/reportWebVitals.js":"4","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/slices/character.ts":"5","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/slices/player.ts":"6","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/components/Logo.tsx":"7","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/pages/lobby/Lobby.tsx":"8","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/pages/homepage/Homepage.tsx":"9","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/pages/login/Login.tsx":"10","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/pages/character/Character.tsx":"11","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/pages/gameRoom/GameRoom.tsx":"12","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/pages/notFound/NotFound.tsx":"13","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/components/Buttons.tsx":"14","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/components/LobbyStatus.tsx":"15","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/socket/index.ts":"16"},{"size":1108,"mtime":1709083356217,"results":"17","hashOfConfig":"18"},{"size":1182,"mtime":1709150195767,"results":"19","hashOfConfig":"18"},{"size":310,"mtime":1709083356227,"results":"20","hashOfConfig":"18"},{"size":362,"mtime":1709083356220,"results":"21","hashOfConfig":"18"},{"size":457,"mtime":1709083356226,"results":"22","hashOfConfig":"18"},{"size":887,"mtime":1709668232700,"results":"23","hashOfConfig":"18"},{"size":428,"mtime":1709150365330,"results":"24","hashOfConfig":"18"},{"size":4675,"mtime":1709150308908,"results":"25","hashOfConfig":"18"},{"size":915,"mtime":1709083356219,"results":"26","hashOfConfig":"18"},{"size":3881,"mtime":1709150317650,"results":"27","hashOfConfig":"18"},{"size":4001,"mtime":1709151529743,"results":"28","hashOfConfig":"18"},{"size":266,"mtime":1709083356218,"results":"29","hashOfConfig":"18"},{"size":362,"mtime":1709083356220,"results":"30","hashOfConfig":"18"},{"size":345,"mtime":1709083356211,"results":"31","hashOfConfig":"18"},{"size":287,"mtime":1709083356211,"results":"32","hashOfConfig":"18"},{"size":135,"mtime":1709083356227,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"npbve7",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"41"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"41"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"41"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/index.js",[],[],["88"],"/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/App.tsx",[],[],["89"],"/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/slices/index.tsx",[],[],"/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/reportWebVitals.js",[],[],"/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/slices/character.ts",[],[],"/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/slices/player.ts",[],[],"/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/components/Logo.tsx",[],[],"/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/pages/lobby/Lobby.tsx",["90","91","92","93","94"],[],"import React, { useState, useEffect, useRef, useReducer } from 'react'\nimport Button from '../../components/Buttons'\nimport { useSelector } from 'react-redux'\nimport { socket } from '../../socket/index'\nimport { useDispatch } from 'react-redux'\nimport { setPlayersInRoom } from '../../slices/player'\nimport Logo from '../../components/Logo'\nimport MessageLogo from '../../images/send-message-icon.png'\nimport '../../scss/main.scss'\nimport LobbyStatus from '../../components/LobbyStatus'\n\ntype LobbyState = {\n  message: string\n  messages: Array<string>\n}\n\nconst Lobby = () => {\n  const initialState: LobbyState = {\n    message: '',\n    messages: [],\n  }\n  const [message, setMessage] = useState<string>('')\n  const [errorMessage, setErrorMessage] = useState<string>('')\n  const [messages, setMessages] = useState<\n    { nickname: string; message: string; character: string }[]\n  >([])\n  const [showMessage, setShowMessage] = useState<boolean>(false)\n\n  // const [playersInRoom, setPlayersInRoom] = useState<Array<string>>([])\n\n  const selectedRoom = useSelector((state: any) => state.playerSlice.gamingRoom)\n  const playersInRoom = useSelector(\n    (state: any) => state.playerSlice.playersInRoom\n  )\n  const selectedCharacter = useSelector(\n    (state: any) => state.characterSlice.character\n  )\n  const hostName = useSelector((state: any) => state.playerSlice.hostName)\n  console.log(hostName)\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    socket.on('update-nicknames', (updatedNicknames) => {\n      dispatch(setPlayersInRoom(updatedNicknames))\n    })\n\n    socket.on('previous-messages', (previousMessages) => {\n      setMessages(previousMessages)\n    })\n\n    const receiveMessageHandler = ({\n      nickname: senderNickname,\n      message,\n      character,\n    }: {\n      nickname: string\n      message: string\n      character: string\n    }) => {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { nickname: senderNickname, message, character },\n      ])\n    }\n\n    socket.on('receive-message', receiveMessageHandler)\n\n    // Cleanup function repeated messages\n    return () => {\n      socket.off('update-nicknames')\n      socket.off('receive-message', receiveMessageHandler)\n      socket.off('playerData')\n    }\n  }, [])\n\n  const submitMessageHandler = () => {\n    if (!message) {\n      setErrorMessage('Please enter your message')\n      return\n    }\n    socket.emit('send-message', message, selectedRoom, selectedCharacter)\n    setMessage('')\n  }\n\n  return (\n    <div className='lobby-container'>\n      {/* <Logo /> */}\n      <h1 className='lobby-title'>Lobby</h1>\n      {/* <p className='lobby-waiting-sentence'>\n        Waiting for the host to start the game....\n      </p> */}\n\n      <div className='players-container'>\n        <h3 className='number-of-players'>\n          Players in room:\n          <span className='length-of-players'>{playersInRoom.length}</span>\n        </h3>\n\n        <LobbyStatus host={hostName} />\n        {playersInRoom.map((playerInfo: string, index: number) => (\n          <p className='players' key={index}>\n            Player name: {playerInfo}\n          </p>\n        ))}\n      </div>\n      {showMessage && (\n        <div className='logo-message-container'>\n          <div className='lobby-message-box'>\n            {messages.map(({ nickname, message, character }, index) => (\n              <div key={index}>\n                <div className='character-message-container'>\n                  <img\n                    src={character}\n                    alt='chosen-character-images'\n                    className='character-image'\n                  />\n                  <span className='chat-message'>{nickname}:</span>\n                  <span className='chat-message'>{message}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className='lobby-input-message-container'>\n            <input\n              onChange={(e) => setMessage(e.target.value)}\n              value={message}\n              className='lobby-input '\n              placeholder='Enter your message'\n            />\n            <img\n              src={MessageLogo}\n              alt='message-logo'\n              className='message-logo'\n              onClick={submitMessageHandler}\n            />\n          </div>\n        </div>\n      )}\n\n      <div className='lobby-button-container'>\n        {hostName && <Button title='Start The Quiz' />}\n\n        <Button\n          title='Send Messages To Your Players'\n          onClick={() => setShowMessage(!showMessage)}\n        />\n      </div>\n      <p className='lobby-message'>{errorMessage && errorMessage}</p>\n    </div>\n  )\n}\n\nexport default Lobby\n","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/pages/homepage/Homepage.tsx",[],[],"/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/pages/login/Login.tsx",["95"],[],"import React, { useRef, useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { changeCharacter } from '../../slices/character'\nimport { gamingRoom, setHostName } from '../../slices/player'\nimport '../../scss/main.scss'\nimport Button from '../../components/Buttons'\nimport { useNavigate } from 'react-router-dom'\nimport { socket } from '../../socket/index'\nimport Logo from '../../components/Logo'\nimport { setPlayersInRoom } from '../../slices/player'\n\n// use redux to use the nickname and room\nconst Login = () => {\n  const inputNicknameRef = useRef<HTMLInputElement>(null)\n  const [message, setMessage] = useState<string>('')\n  const [playerName, setPlayerName] = useState('')\n\n  // const [roomName, setRoomName] = useState('')\n  const dispatch = useDispatch()\n  // redux\n  const selectedCharacter = useSelector(\n    (state: any) => state.characterSlice.character\n  )\n  const selectedRoom = useSelector((state: any) => state.playerSlice.gamingRoom)\n\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    if (inputNicknameRef.current) {\n      inputNicknameRef.current.focus()\n    }\n\n    const storedCharacter = localStorage.getItem('character-image')\n    if (storedCharacter) {\n      dispatch(changeCharacter(storedCharacter))\n    }\n\n    socket.on('update-players', (players: string[]) => {\n      dispatch(setPlayersInRoom(players))\n    })\n    return () => {\n      socket.off('update-players')\n    }\n  }, [dispatch, selectedCharacter])\n\n  const joinRoomHandler = () => {\n    if (!selectedRoom || !playerName) {\n      setMessage(\n        'Please enter your nickname and the existing room to join the game'\n      )\n      return\n    }\n\n    socket.emit('join-room', selectedRoom, playerName, (roomExist: boolean) => {\n      if (roomExist) {\n        navigate('/lobby')\n      } else {\n        setMessage(`The room ${selectedRoom} does not exist`)\n      }\n    })\n  }\n  const joinNewGameHandler = () => {\n    if (!playerName && !selectedRoom) {\n      setMessage('Please enter your username and room to create a quiz')\n      return\n    } else {\n      setPlayerName('') // Reset playerName first\n      dispatch(gamingRoom('')) // Reset selectedRoom\n\n      socket.emit(\n        'create-room',\n        selectedRoom,\n        playerName,\n        (room: string | boolean) => {\n          // callback function that provides the name of the room\n          if (typeof room === 'string') {\n            setMessage(`Room ${room} has been created`)\n            dispatch(setHostName(playerName)) // Dispatch setHostName after setting playerName\n          } else {\n            setMessage('The room already exists, please try again')\n          }\n        }\n      )\n    }\n  }\n\n  return (\n    <div className='login-container'>\n      {/* <Logo /> */}\n      {selectedCharacter && (\n        <img\n          src={selectedCharacter}\n          alt='selected-character'\n          className='selected-character'\n          data-cy='selected-character'\n        />\n      )}\n      <p className='nickname' data-cy='nickname'>\n        Username\n      </p>\n      <input\n        type='text'\n        ref={inputNicknameRef}\n        className='input'\n        data-cy='input'\n        onChange={(e) => setPlayerName(e.target.value)}\n        value={playerName}\n      />\n      <p className='nickname' data-cy='nickname'>\n        Room\n      </p>\n      <input\n        type='text'\n        className='input'\n        data-cy='input'\n        onChange={(e) => dispatch(gamingRoom(e.target.value))}\n        value={selectedRoom}\n      />\n\n      <div className='start-game-container'>\n        <Button title='Create Room' onClick={joinNewGameHandler} />\n        <Button\n          title='Join Game'\n          onClick={joinRoomHandler}\n          dataCy='join-button'\n        />\n      </div>\n\n      {message && <p className='not-entered-message'>{message}</p>}\n    </div>\n  )\n}\n\nexport default Login\n","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/pages/character/Character.tsx",["96"],[],"import React, { useState } from 'react'\nimport '../../scss/main.scss'\nimport Duck1 from '../../images/duck1.png'\nimport Duck2 from '../../images/duck2.png'\nimport Duck3 from '../../images/duck3.png'\nimport Duck4 from '../../images/duck4.png'\nimport Duck5 from '../../images/duck5.png'\nimport Duck6 from '../../images/duck6.png'\nimport Duck7 from '../../images/duck7.png'\nimport Duck8 from '../../images/duck8.png'\nimport Duck9 from '../../images/duck9.png'\nimport { useNavigate } from 'react-router-dom'\nimport { changeCharacter } from '../../slices/character'\nimport { useDispatch } from 'react-redux'\nimport Button from '../../components/Buttons'\nimport Logo from '../../components/Logo'\n\ninterface CharacterProps {\n  image: any\n  alt: string\n  selectedImage: any\n  dataCy: string\n}\n\nconst CharacterImages = ({\n  image,\n  alt,\n  selectedImage,\n  dataCy,\n}: CharacterProps) => {\n  const dispatch = useDispatch()\n\n  const selectCharacterHandler = (selectedCharacter: any) => {\n    if (selectedCharacter) {\n      dispatch(changeCharacter(selectedCharacter))\n      localStorage.setItem('character-image', selectedCharacter)\n      selectedImage('Your character has been chosen')\n    }\n  }\n\n  return (\n    <div className='image-container'>\n      <img\n        src={image}\n        alt={alt}\n        className='duck-image'\n        onClick={() => selectCharacterHandler(image)}\n        data-cy={dataCy}\n      />\n    </div>\n  )\n}\n\nconst Character = () => {\n  const [selectedImageMessage, setSelectedImageMessage] = useState<string>('')\n\n  const navigate = useNavigate()\n  const navigateToLoginPage = () => {\n    if (selectedImageMessage === 'Your character has been chosen') {\n      navigate('/login')\n    } else {\n      setSelectedImageMessage('Please select your character')\n    }\n  }\n\n  return (\n    <div className='character-container'>\n      {/* <Logo /> */}\n      <h1 className='character-heading' data-cy='character-heading'>\n        Choose Your Duck\n      </h1>\n      <div className='row-character'>\n        <CharacterImages\n          image={Duck1}\n          alt='duck1'\n          selectedImage={setSelectedImageMessage}\n          dataCy='duck-image'\n        />\n        <CharacterImages\n          image={Duck2}\n          alt='duck2'\n          selectedImage={setSelectedImageMessage}\n          dataCy='duck-image'\n        />\n        <CharacterImages\n          image={Duck3}\n          alt='duck3'\n          selectedImage={setSelectedImageMessage}\n          dataCy='duck-image'\n        />\n      </div>\n      <div className='row-character'>\n        <CharacterImages\n          image={Duck4}\n          alt='duck4'\n          selectedImage={setSelectedImageMessage}\n          dataCy='duck-image'\n        />\n        <CharacterImages\n          image={Duck5}\n          alt='duck5'\n          selectedImage={setSelectedImageMessage}\n          dataCy='duck-image'\n        />\n        <CharacterImages\n          image={Duck6}\n          alt='duck6'\n          selectedImage={setSelectedImageMessage}\n          dataCy='duck-image'\n        />\n      </div>\n      <div className='row-character'>\n        <CharacterImages\n          image={Duck7}\n          alt='duck7'\n          selectedImage={setSelectedImageMessage}\n          dataCy='duck-image'\n        />\n        <CharacterImages\n          image={Duck8}\n          alt='duck8'\n          selectedImage={setSelectedImageMessage}\n          dataCy='duck-image'\n        />\n        <CharacterImages\n          image={Duck9}\n          alt='duck9'\n          selectedImage={setSelectedImageMessage}\n          dataCy='duck-image'\n        />\n      </div>\n      <div className='character-button-container'>\n        <Button\n          title='Next'\n          onClick={navigateToLoginPage}\n          dataCy='next-button'\n        />\n      </div>\n      {selectedImageMessage && (\n        <p\n          className='character-chosen-message'\n          data-cy='character-chosen-message'\n        >\n          {selectedImageMessage}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Character\n","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/pages/gameRoom/GameRoom.tsx",["97"],[],"import React from 'react'\nimport { useSelector } from 'react-redux'\nimport Button from '../../components/Buttons'\n\nconst GameSetup = () => {\n  return (\n    <div>\n      <p>Let's play a game</p>\n      <Button title='Play' />\n    </div>\n  )\n}\n\nexport default GameSetup\n","/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/pages/notFound/NotFound.tsx",[],[],"/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/components/Buttons.tsx",[],[],"/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/components/LobbyStatus.tsx",[],[],"/Users/doheelee/Desktop/personal-projects/smart-duck-original/client/src/socket/index.ts",[],[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":1,"column":38,"nodeType":"102","messageId":"103","endLine":1,"endColumn":44},{"ruleId":"100","severity":1,"message":"104","line":1,"column":46,"nodeType":"102","messageId":"103","endLine":1,"endColumn":56},{"ruleId":"100","severity":1,"message":"105","line":7,"column":8,"nodeType":"102","messageId":"103","endLine":7,"endColumn":12},{"ruleId":"100","severity":1,"message":"106","line":18,"column":9,"nodeType":"102","messageId":"103","endLine":18,"endColumn":33},{"ruleId":"107","severity":1,"message":"108","line":75,"column":6,"nodeType":"109","endLine":75,"endColumn":8,"suggestions":"110"},{"ruleId":"100","severity":1,"message":"105","line":9,"column":8,"nodeType":"102","messageId":"103","endLine":9,"endColumn":12},{"ruleId":"100","severity":1,"message":"105","line":16,"column":8,"nodeType":"102","messageId":"103","endLine":16,"endColumn":12},{"ruleId":"100","severity":1,"message":"111","line":2,"column":10,"nodeType":"102","messageId":"103","endLine":2,"endColumn":21},"no-new-object",["112"],"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useReducer' is defined but never used.","'Logo' is defined but never used.","'initialState' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["113"],"'useSelector' is defined but never used.","no-object-constructor",{"desc":"114","fix":"115"},"Update the dependencies array to be: [dispatch]",{"range":"116","text":"117"},[2254,2256],"[dispatch]"]