[{"/Users/doheelee/Quiz/client/src/index.js":"1","/Users/doheelee/Quiz/client/src/App.tsx":"2","/Users/doheelee/Quiz/client/src/slices/index.tsx":"3","/Users/doheelee/Quiz/client/src/reportWebVitals.js":"4","/Users/doheelee/Quiz/client/src/pages/GameRoom.tsx":"5","/Users/doheelee/Quiz/client/src/pages/Completed.tsx":"6","/Users/doheelee/Quiz/client/src/pages/Rules.tsx":"7","/Users/doheelee/Quiz/client/src/pages/Character.tsx":"8","/Users/doheelee/Quiz/client/src/pages/Login.tsx":"9","/Users/doheelee/Quiz/client/src/pages/Homepage.tsx":"10","/Users/doheelee/Quiz/client/src/pages/Questions.tsx":"11","/Users/doheelee/Quiz/client/src/pages/Lobby.tsx":"12","/Users/doheelee/Quiz/client/src/pages/NotFound.tsx":"13","/Users/doheelee/Quiz/client/src/slices/character.ts":"14","/Users/doheelee/Quiz/client/src/slices/player.ts":"15","/Users/doheelee/Quiz/client/src/slices/questions.ts":"16","/Users/doheelee/Quiz/client/src/components/Logo.tsx":"17","/Users/doheelee/Quiz/client/src/components/LobbyStatus.tsx":"18","/Users/doheelee/Quiz/client/src/components/Category.tsx":"19","/Users/doheelee/Quiz/client/src/components/Difficulty.tsx":"20","/Users/doheelee/Quiz/client/src/components/Buttons.tsx":"21","/Users/doheelee/Quiz/client/src/components/Spinner.tsx":"22","/Users/doheelee/Quiz/client/src/socket/index.ts":"23"},{"size":1108,"mtime":1711401197997,"results":"24","hashOfConfig":"25"},{"size":1478,"mtime":1722862731373,"results":"26","hashOfConfig":"25"},{"size":390,"mtime":1711401198000,"results":"27","hashOfConfig":"25"},{"size":362,"mtime":1711401197998,"results":"28","hashOfConfig":"25"},{"size":1272,"mtime":1722854727987,"results":"29","hashOfConfig":"25"},{"size":1097,"mtime":1722863004129,"results":"30","hashOfConfig":"25"},{"size":712,"mtime":1722854735223,"results":"31","hashOfConfig":"25"},{"size":3924,"mtime":1711401197998,"results":"32","hashOfConfig":"25"},{"size":4013,"mtime":1711401197998,"results":"33","hashOfConfig":"25"},{"size":906,"mtime":1711401197998,"results":"34","hashOfConfig":"25"},{"size":6338,"mtime":1722862863106,"results":"35","hashOfConfig":"25"},{"size":4957,"mtime":1722863428626,"results":"36","hashOfConfig":"25"},{"size":359,"mtime":1711401197998,"results":"37","hashOfConfig":"25"},{"size":457,"mtime":1711401198000,"results":"38","hashOfConfig":"25"},{"size":879,"mtime":1711401198000,"results":"39","hashOfConfig":"25"},{"size":780,"mtime":1722862700384,"results":"40","hashOfConfig":"25"},{"size":428,"mtime":1711401197996,"results":"41","hashOfConfig":"25"},{"size":287,"mtime":1711401197996,"results":"42","hashOfConfig":"25"},{"size":1030,"mtime":1711401197996,"results":"43","hashOfConfig":"25"},{"size":1006,"mtime":1711401197996,"results":"44","hashOfConfig":"25"},{"size":423,"mtime":1711401197996,"results":"45","hashOfConfig":"25"},{"size":295,"mtime":1711401197996,"results":"46","hashOfConfig":"25"},{"size":153,"mtime":1722869722252,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"1a2fxpc",{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"55"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/doheelee/Quiz/client/src/index.js",[],[],["121"],"/Users/doheelee/Quiz/client/src/App.tsx",[],[],["122"],"/Users/doheelee/Quiz/client/src/slices/index.tsx",[],[],"/Users/doheelee/Quiz/client/src/reportWebVitals.js",[],[],"/Users/doheelee/Quiz/client/src/pages/GameRoom.tsx",[],[],"/Users/doheelee/Quiz/client/src/pages/Completed.tsx",[],[],"/Users/doheelee/Quiz/client/src/pages/Rules.tsx",[],[],"/Users/doheelee/Quiz/client/src/pages/Character.tsx",[],[],"/Users/doheelee/Quiz/client/src/pages/Login.tsx",[],[],"/Users/doheelee/Quiz/client/src/pages/Homepage.tsx",[],[],"/Users/doheelee/Quiz/client/src/pages/Questions.tsx",["123","124"],[],"import React, { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setScore } from '../slices/questions'\nimport Button from '../components/Buttons'\nimport { useNavigate } from 'react-router-dom'\nimport '../scss/main.scss'\nimport Spinner from '../components/Spinner'\n\nconst Questions = () => {\n  const [questions, setQuestions] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [selectOption, setSelectOption] = useState('')\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\n  const [shuffledOptions, setShuffledOptions] = useState<string[]>([])\n  const [message, setMessage] = useState('')\n  const [timer, setTimer] = useState(20)\n\n  const selectedCategory = useSelector(\n    (state: any) => state.questionSlice.selectedCategory\n  )\n  const difficulty = useSelector(\n    (state: any) => state.questionSlice.selectedDifficulty\n  )\n  const score = useSelector((state: any) => state.questionSlice.score)\n\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n\n  const fetchQuestions = async (retryCount = 3) => {\n    try {\n      const response = await fetch(\n        `https://opentdb.com/api.php?amount=5&category=${selectedCategory.id}&difficulty=${difficulty}&type=multiple`\n      )\n\n      if (response.status === 429) {\n        const retryAfter = response.headers.get('Retry-After')\n        const delay = retryAfter ? parseInt(retryAfter) * 1000 : 1000 // Default to 1 second delay if no Retry-After header provided\n\n        if (retryCount > 0) {\n          setTimeout(() => {\n            fetchQuestions(retryCount - 1)\n          }, delay)\n        } else {\n          // Handle error or display a message\n          console.error('API rate limit exceeded')\n          // Optionally, set loading state to false to stop continuous loading\n          setLoading(false)\n        }\n\n        return\n      }\n\n      const data = await response.json()\n      setQuestions(data.results)\n      setLoading(false)\n    } catch (error) {\n      console.error(error)\n      if (retryCount > 0) {\n        setTimeout(() => {\n          fetchQuestions(retryCount - 1)\n        }, 1000) // Retry after 1 second\n      } else {\n        // Handle error or display a message\n        console.error('Error fetching data')\n        // Optionally, set loading state to false to stop continuous loading\n        setLoading(false)\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (questions.length > 0) {\n      const shuffled = shuffleQuestions(\n        questions[currentQuestionIndex].correct_answer,\n        questions[currentQuestionIndex].incorrect_answers\n      )\n      setShuffledOptions(shuffled)\n      setTimer(20)\n    }\n  }, [questions, currentQuestionIndex])\n\n  const shuffleQuestions = (\n    correctAnswer: string,\n    incorrectAnswer: string[]\n  ) => {\n    const options = [...incorrectAnswer, correctAnswer]\n    return options.sort(() => Math.random() - 0.5)\n  }\n\n  const handleSelectOption = (option: string, correctAnswer: string) => {\n    setSelectOption(option)\n    if (option === correctAnswer) {\n      dispatch(setScore(score + 1))\n    }\n  }\n\n  const handleNextQuestion = () => {\n    if (!selectOption) {\n      setMessage('Please select an answer')\n      return\n    } else if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1)\n      setSelectOption('')\n      setMessage('')\n      setTimer(20)\n    }\n  }\n\n  const handleCompletedPage = () => {\n    if (!selectOption) {\n      setMessage('Please select an answer')\n      return\n    }\n    navigate('/completed')\n    setMessage('')\n  }\n\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      setTimer((prevTime) => {\n        if (prevTime === 0) {\n          clearInterval(timerId)\n          if (currentQuestionIndex === questions.length - 1) {\n            navigate('/completed')\n          } else {\n            setCurrentQuestionIndex(currentQuestionIndex + 1)\n            setMessage('')\n            return 20 // Reset the timer to 20 when moving to the next question\n          }\n        }\n        return prevTime - 1\n      })\n    }, 1000)\n\n    // Clean up interval on component unmount\n    return () => clearInterval(timerId)\n  }, [currentQuestionIndex, questions])\n\n  useEffect(() => {\n    fetchQuestions()\n  }, [])\n\n  return (\n    <div>\n      {loading ? (\n        <div className='spinner'>\n          <Spinner />\n        </div>\n      ) : (\n        questions &&\n        questions.length > 0 && (\n          <div>\n            <div className='questions-container'>\n              <p className='timer-container'>\n                Time left <span className='timer'>{timer}</span>\n              </p>\n\n              <div className='question-answer-container'>\n                <p className='questions'>\n                  {questions[currentQuestionIndex].question}\n                </p>\n                <div className='questions-answers'>\n                  {shuffledOptions.map((option, index) => (\n                    <>\n                      <Button\n                        key={index}\n                        title={option}\n                        onClick={() =>\n                          handleSelectOption(\n                            option,\n                            questions[currentQuestionIndex].correct_answer\n                          )\n                        }\n                        active={selectOption === option}\n                      />\n                    </>\n                  ))}\n                </div>\n                {currentQuestionIndex === questions.length - 1 ? (\n                  <Button title='Submit Quiz' onClick={handleCompletedPage} />\n                ) : (\n                  <Button title='Next Question' onClick={handleNextQuestion} />\n                )}\n              </div>\n              <div className='bottom-container'>\n                {selectOption ? (\n                  <p className='selected-option'>{`You have selected ${selectOption}`}</p>\n                ) : (\n                  message && <p className='error-selected-message'>{message}</p>\n                )}\n\n                <p className='out-of-questions'>{`${\n                  currentQuestionIndex + 1\n                }/5 questions`}</p>\n              </div>\n            </div>\n          </div>\n        )\n      )}\n    </div>\n  )\n}\n\nexport default Questions\n","/Users/doheelee/Quiz/client/src/pages/Lobby.tsx",["125","126","127"],[],"import React, { useState, useEffect, useRef, useReducer } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport Button from '../components/Buttons'\nimport { useSelector } from 'react-redux'\nimport { socket } from '../socket/index'\nimport { useDispatch } from 'react-redux'\nimport { setPlayersInRoom } from '../slices/player'\nimport MessageLogo from '../images/send-message-icon.png'\nimport '../scss/main.scss'\nimport LobbyStatus from '../components/LobbyStatus'\n\ninterface MessagesState {\n  nickname: string\n  message: string\n  character: string\n}\n\nconst Lobby = () => {\n  const [message, setMessage] = useState<string>('')\n  const [errorMessage, setErrorMessage] = useState<string>('')\n  const [messages, setMessages] = useState<Array<MessagesState>>([])\n  const [showMessage, setShowMessage] = useState<boolean>(false)\n\n  const selectedRoom = useSelector((state: any) => state.playerSlice.gamingRoom)\n  const playersInRoom = useSelector(\n    (state: any) => state.playerSlice.playersInRoom\n  )\n  const selectedCharacter = useSelector(\n    (state: any) => state.characterSlice.character\n  )\n  const hostName = useSelector((state: any) => state.playerSlice.hostName)\n  const selectedCategory = useSelector(\n    (state: any) => state.questionSlice.selectedCategory\n  )\n  const difficulty = useSelector(\n    (state: any) => state.questionSlice.selectedDifficulty\n  )\n\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    socket.on('update-nicknames', (updatedNicknames) => {\n      dispatch(setPlayersInRoom(updatedNicknames))\n    })\n\n    socket.on('previous-messages', (previousMessages) => {\n      setMessages(previousMessages)\n    })\n\n    const receiveMessageHandler = ({\n      nickname: senderNickname,\n      message,\n      character,\n    }: {\n      nickname: string\n      message: string\n      character: string\n    }) => {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { nickname: senderNickname, message, character },\n      ])\n    }\n\n    socket.on('receive-message', receiveMessageHandler)\n    socket.on('start-game', () => {\n      navigate('/rules')\n    })\n\n    return () => {\n      socket.off('update-nicknames')\n      socket.off('receive-message', receiveMessageHandler)\n      socket.off('playerData')\n      socket.off('start-game')\n    }\n  }, [])\n\n  const navigateToQuestionPage = () => {\n    socket.emit('start-game', selectedRoom)\n  }\n\n  const submitMessageHandler = () => {\n    if (!message) {\n      setErrorMessage('Please enter your message')\n      return\n    }\n    socket.emit('send-message', message, selectedRoom, selectedCharacter)\n    setMessage('')\n  }\n\n  return (\n    <div className='lobby-container'>\n      <h1 className='lobby-title'>Lobby</h1>\n\n      <div className='players-container'>\n        <h3 className='number-of-players'>\n          Players in room:\n          <span className='length-of-players'>{playersInRoom.length}</span>\n        </h3>\n\n        <LobbyStatus host={hostName} />\n        {playersInRoom.map((playerInfo: string, index: number) => (\n          <p className='players' key={index}>\n            Player name: {playerInfo}\n          </p>\n        ))}\n      </div>\n      {showMessage && (\n        <div className='logo-message-container'>\n          <div className='lobby-message-box'>\n            {messages.map(({ nickname, message, character }, index) => (\n              <div key={index}>\n                <div className='character-message-container'>\n                  <img\n                    src={character}\n                    alt='chosen-character-images'\n                    className='character-image'\n                  />\n                  <span className='chat-message'>{nickname}:</span>\n                  <span className='chat-message'>{message}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className='lobby-input-message-container'>\n            <input\n              onChange={(e) => setMessage(e.target.value)}\n              value={message}\n              className='lobby-input '\n              placeholder='Enter your message'\n            />\n            <img\n              src={MessageLogo}\n              alt='message-logo'\n              className='message-logo'\n              onClick={submitMessageHandler}\n            />\n          </div>\n        </div>\n      )}\n\n      <div className='lobby-button-container'>\n        {hostName && (\n          <Button title='Start The Quiz' onClick={navigateToQuestionPage} />\n        )}\n\n        <Button\n          title='Send Messages To Your Players'\n          onClick={() => setShowMessage(!showMessage)}\n        />\n      </div>\n      <p className='lobby-message'>{errorMessage && errorMessage}</p>\n      <p className='selected-level-category'>\n        {selectedCategory &&\n          difficulty &&\n          `The host has selected ${selectedCategory.name} with the level of ${difficulty}`}\n      </p>\n    </div>\n  )\n}\n\nexport default Lobby\n","/Users/doheelee/Quiz/client/src/pages/NotFound.tsx",[],[],"/Users/doheelee/Quiz/client/src/slices/character.ts",[],[],"/Users/doheelee/Quiz/client/src/slices/player.ts",[],[],"/Users/doheelee/Quiz/client/src/slices/questions.ts",[],[],"/Users/doheelee/Quiz/client/src/components/Logo.tsx",[],[],"/Users/doheelee/Quiz/client/src/components/LobbyStatus.tsx",[],[],"/Users/doheelee/Quiz/client/src/components/Category.tsx",[],[],"/Users/doheelee/Quiz/client/src/components/Difficulty.tsx",[],[],"/Users/doheelee/Quiz/client/src/components/Buttons.tsx",[],[],"/Users/doheelee/Quiz/client/src/components/Spinner.tsx",[],[],"/Users/doheelee/Quiz/client/src/socket/index.ts",[],[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":137,"column":6,"nodeType":"132","endLine":137,"endColumn":39,"suggestions":"133"},{"ruleId":"130","severity":1,"message":"134","line":141,"column":6,"nodeType":"132","endLine":141,"endColumn":8,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":1,"column":38,"nodeType":"138","messageId":"139","endLine":1,"endColumn":44},{"ruleId":"136","severity":1,"message":"140","line":1,"column":46,"nodeType":"138","messageId":"139","endLine":1,"endColumn":56},{"ruleId":"130","severity":1,"message":"141","line":77,"column":6,"nodeType":"132","endLine":77,"endColumn":8,"suggestions":"142"},"no-new-object",["143"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["144"],"React Hook useEffect has a missing dependency: 'fetchQuestions'. Either include it or remove the dependency array.",["145"],"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useReducer' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'navigate'. Either include them or remove the dependency array.",["146"],"no-object-constructor",{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},"Update the dependencies array to be: [currentQuestionIndex, navigate, questions]",{"range":"153","text":"154"},"Update the dependencies array to be: [fetchQuestions]",{"range":"155","text":"156"},"Update the dependencies array to be: [dispatch, navigate]",{"range":"157","text":"158"},[4217,4250],"[currentQuestionIndex, navigate, questions]",[4299,4301],"[fetchQuestions]",[2327,2329],"[dispatch, navigate]"]