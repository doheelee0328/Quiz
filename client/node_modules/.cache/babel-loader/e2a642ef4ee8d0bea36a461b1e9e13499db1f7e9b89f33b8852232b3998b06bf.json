{"ast":null,"code":"var _jsxFileName = \"/Users/doheelee/Desktop/smart-duck/client/src/pages/login/Login.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeCharacter } from '../../slices/character';\nimport { gamingRoom } from '../../slices/player';\nimport '../../scss/main.scss';\nimport Button from '../../components/Buttons';\nimport { useNavigate } from 'react-router-dom';\nimport { socket } from '../../socket/index';\nimport Logo from '../../components/Logo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// use redux to use the nickname and room\nconst Login = ({\n  setPlayersInRoom\n}) => {\n  _s();\n  const inputNicknameRef = useRef(null);\n  const [message, setMessage] = useState('');\n  const [playerName, setPlayerName] = useState('');\n\n  // const [roomName, setRoomName] = useState('')\n  const dispatch = useDispatch();\n  // redux\n  const selectedCharacter = useSelector(state => state.characterSlice.character);\n  const selectedRoom = useSelector(state => state.playerSlice.gamingRoom);\n  const navigate = useNavigate();\n  const joinRoomHandler = () => {\n    if (!selectedRoom && !playerName) {\n      setMessage('Please enter your nickname and the existing room to join the game');\n      return;\n    }\n    socket.emit('join-room', selectedRoom, playerName, roomExist => {\n      // call backs whether the room should exist or not\n      if (roomExist) {\n        navigate('/lobby');\n      } else {\n        setMessage(`The room:${selectedRoom} does not exist`);\n      }\n    });\n  };\n  const joinNewGameHandler = () => {\n    if (!playerName && !selectedRoom) {\n      setMessage('Please enter your username and room to create a quiz');\n      return;\n    } else {\n      socket.emit('create-room', selectedRoom, playerName, room => {\n        // callback function that provides the name of the room\n        setMessage(`Room ${room} has been created`);\n\n        // Update players in room immediately after creating the room\n        setPlayersInRoom([playerName]);\n        dispatch(gamingRoom(room));\n      });\n    }\n    setPlayerName('');\n    dispatch(gamingRoom(''));\n  };\n  useEffect(() => {\n    if (inputNicknameRef.current) {\n      inputNicknameRef.current.focus();\n    }\n    const storedCharacter = localStorage.getItem('character-image');\n    if (storedCharacter) {\n      dispatch(changeCharacter(storedCharacter));\n    }\n  }, [dispatch, selectedCharacter]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), selectedCharacter && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: selectedCharacter,\n      alt: \"selected-character\",\n      className: \"selected-character\",\n      \"data-cy\": \"selected-character\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"nickname\",\n      \"data-cy\": \"nickname\",\n      children: \"Username\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: inputNicknameRef,\n      className: \"input\",\n      \"data-cy\": \"input\",\n      onChange: e => setPlayerName(e.target.value),\n      value: playerName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"nickname\",\n      \"data-cy\": \"nickname\",\n      children: \"Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"input\",\n      \"data-cy\": \"input\",\n      onChange: e => dispatch(gamingRoom(e.target.value)),\n      value: selectedRoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"start-game-container\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        title: \"Create Room\",\n        onClick: joinNewGameHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        title: \"Join Game\",\n        onClick: joinRoomHandler,\n        dataCy: \"join-button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"not-entered-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"fUi2u3ah7FYcFSNWB0xyet0+q2c=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useSelector","useDispatch","changeCharacter","gamingRoom","Button","useNavigate","socket","Logo","jsxDEV","_jsxDEV","Login","setPlayersInRoom","_s","inputNicknameRef","message","setMessage","playerName","setPlayerName","dispatch","selectedCharacter","state","characterSlice","character","selectedRoom","playerSlice","navigate","joinRoomHandler","emit","roomExist","joinNewGameHandler","room","current","focus","storedCharacter","localStorage","getItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","type","ref","onChange","e","target","value","title","onClick","dataCy","_c","$RefreshReg$"],"sources":["/Users/doheelee/Desktop/smart-duck/client/src/pages/login/Login.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { changeCharacter } from '../../slices/character'\nimport { gamingRoom } from '../../slices/player'\nimport '../../scss/main.scss'\nimport Button from '../../components/Buttons'\nimport { useNavigate } from 'react-router-dom'\nimport { socket } from '../../socket/index'\nimport Logo from '../../components/Logo'\nimport { Dispatch, SetStateAction } from 'react'\n\n// use redux to use the nickname and room\nconst Login = ({\n  setPlayersInRoom,\n}: {\n  setPlayersInRoom: Dispatch<SetStateAction<string[]>>\n}) => {\n  const inputNicknameRef = useRef<HTMLInputElement>(null)\n  const [message, setMessage] = useState<string>('')\n  const [playerName, setPlayerName] = useState('')\n\n  // const [roomName, setRoomName] = useState('')\n  const dispatch = useDispatch()\n  // redux\n  const selectedCharacter = useSelector(\n    (state: any) => state.characterSlice.character\n  )\n  const selectedRoom = useSelector((state: any) => state.playerSlice.gamingRoom)\n\n  const navigate = useNavigate()\n\n  const joinRoomHandler = () => {\n    if (!selectedRoom && !playerName) {\n      setMessage(\n        'Please enter your nickname and the existing room to join the game'\n      )\n      return\n    }\n\n    socket.emit('join-room', selectedRoom, playerName, (roomExist: boolean) => {\n      // call backs whether the room should exist or not\n      if (roomExist) {\n        navigate('/lobby')\n      } else {\n        setMessage(`The room:${selectedRoom} does not exist`)\n      }\n    })\n  }\n  const joinNewGameHandler = () => {\n    if (!playerName && !selectedRoom) {\n      setMessage('Please enter your username and room to create a quiz')\n      return\n    } else {\n      socket.emit('create-room', selectedRoom, playerName, (room: string) => {\n        // callback function that provides the name of the room\n        setMessage(`Room ${room} has been created`)\n\n        // Update players in room immediately after creating the room\n        setPlayersInRoom([playerName])\n\n        dispatch(gamingRoom(room))\n      })\n    }\n    setPlayerName('')\n    dispatch(gamingRoom(''))\n  }\n  useEffect(() => {\n    if (inputNicknameRef.current) {\n      inputNicknameRef.current.focus()\n    }\n\n    const storedCharacter = localStorage.getItem('character-image')\n    if (storedCharacter) {\n      dispatch(changeCharacter(storedCharacter))\n    }\n  }, [dispatch, selectedCharacter])\n\n  return (\n    <div className='login-container'>\n      <Logo />\n      {selectedCharacter && (\n        <img\n          src={selectedCharacter}\n          alt='selected-character'\n          className='selected-character'\n          data-cy='selected-character'\n        />\n      )}\n      <p className='nickname' data-cy='nickname'>\n        Username\n      </p>\n      <input\n        type='text'\n        ref={inputNicknameRef}\n        className='input'\n        data-cy='input'\n        onChange={(e) => setPlayerName(e.target.value)}\n        value={playerName}\n      />\n      <p className='nickname' data-cy='nickname'>\n        Room\n      </p>\n      <input\n        type='text'\n        className='input'\n        data-cy='input'\n        onChange={(e) => dispatch(gamingRoom(e.target.value))}\n        value={selectedRoom}\n      />\n\n      <div className='start-game-container'>\n        <Button title='Create Room' onClick={joinNewGameHandler} />\n        <Button\n          title='Join Game'\n          onClick={joinRoomHandler}\n          dataCy='join-button'\n        />\n      </div>\n\n      {message && <p className='not-entered-message'>{message}</p>}\n    </div>\n  )\n}\n\nexport default Login\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}