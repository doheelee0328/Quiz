{"ast":null,"code":"var _jsxFileName = \"/Users/doheelee/Desktop/smart-duck/client/src/pages/lobby/Lobby.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Button from '../../components/Buttons';\nimport { useSelector } from 'react-redux';\nimport { socket } from '../../socket/index';\nimport { useDispatch } from 'react-redux';\nimport { nickname } from '../../slices/player';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Lobby = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const selectedNickname = useSelector(state => state.playerSlice.nickname);\n  const selectedRoom = useSelector(state => state.playerSlice.gamingRoom);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    socket.on('update-nicknames', updatedNicknames => {\n      dispatch(nickname(updatedNicknames));\n    });\n    const receiveMessageHandler = ({\n      nickname: senderNickname,\n      message\n    }) => {\n      console.log('Received message:', messages); // Add logging here\n      setMessages(prevMessages => [...prevMessages, {\n        nickname: senderNickname,\n        message\n      }]);\n    };\n    socket.on('receive-message', receiveMessageHandler);\n\n    // Cleanup function to remove event listener\n    return () => {\n      socket.off('update-nicknames');\n      socket.off('receive-message', receiveMessageHandler);\n    };\n  }, []);\n  const submitMessageHandler = () => {\n    if (!message) {\n      setMessage('Please enter your message');\n      return;\n    }\n    socket.emit('send-message', message, selectedRoom);\n    setMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lobby\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lobby-container\",\n      children: messages.map(({\n        nickname,\n        message\n      }, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: '4rem',\n          color: 'white'\n        },\n        children: [nickname, \": \", message]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => setMessage(e.target.value),\n      value: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      title: \"Send Message\",\n      onClick: submitMessageHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(Lobby, \"nXRiIc/wjpeKF4fwrA0idGbLhIM=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n_c = Lobby;\nexport default Lobby;\nvar _c;\n$RefreshReg$(_c, \"Lobby\");","map":{"version":3,"names":["React","useState","useEffect","Button","useSelector","socket","useDispatch","nickname","jsxDEV","_jsxDEV","Lobby","_s","message","setMessage","messages","setMessages","selectedNickname","state","playerSlice","selectedRoom","gamingRoom","dispatch","on","updatedNicknames","receiveMessageHandler","senderNickname","console","log","prevMessages","off","submitMessageHandler","emit","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","index","style","fontSize","color","onChange","e","target","value","title","onClick","_c","$RefreshReg$"],"sources":["/Users/doheelee/Desktop/smart-duck/client/src/pages/lobby/Lobby.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Button from '../../components/Buttons'\nimport { useSelector } from 'react-redux'\nimport { socket } from '../../socket/index'\nimport { useDispatch } from 'react-redux'\nimport { nickname } from '../../slices/player'\n\nconst Lobby = () => {\n  const [message, setMessage] = useState('')\n  const [messages, setMessages] = useState<\n    { nickname: string; message: string }[]\n  >([])\n\n  const selectedNickname = useSelector(\n    (state: any) => state.playerSlice.nickname\n  )\n\n  const selectedRoom = useSelector((state: any) => state.playerSlice.gamingRoom)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    socket.on('update-nicknames', (updatedNicknames: string[]) => {\n      dispatch(nickname(updatedNicknames))\n    })\n\n    const receiveMessageHandler = ({\n      nickname: senderNickname,\n      message,\n    }: {\n      nickname: string\n      message: string\n    }) => {\n      console.log('Received message:', messages) // Add logging here\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { nickname: senderNickname, message },\n      ])\n    }\n\n    socket.on('receive-message', receiveMessageHandler)\n\n    // Cleanup function to remove event listener\n    return () => {\n      socket.off('update-nicknames')\n      socket.off('receive-message', receiveMessageHandler)\n    }\n  }, [])\n\n  const submitMessageHandler = () => {\n    if (!message) {\n      setMessage('Please enter your message')\n      return\n    }\n    socket.emit('send-message', message, selectedRoom)\n    setMessage('')\n  }\n\n  return (\n    <div>\n      <h1>Lobby</h1>\n      <div className='lobby-container'>\n        {messages.map(({ nickname, message }, index) => (\n          <p key={index} style={{ fontSize: '4rem', color: 'white' }}>\n            {nickname}: {message}\n          </p>\n        ))}\n      </div>\n      <input onChange={(e) => setMessage(e.target.value)} value={message} />\n      <Button title='Send Message' onClick={submitMessageHandler} />\n    </div>\n  )\n}\n\nexport default Lobby\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,0BAA0B;AAC7C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,QAAQ,QAAQ,qBAAqB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAEtC,EAAE,CAAC;EAEL,MAAMe,gBAAgB,GAAGZ,WAAW,CACjCa,KAAU,IAAKA,KAAK,CAACC,WAAW,CAACX,QACpC,CAAC;EAED,MAAMY,YAAY,GAAGf,WAAW,CAAEa,KAAU,IAAKA,KAAK,CAACC,WAAW,CAACE,UAAU,CAAC;EAC9E,MAAMC,QAAQ,GAAGf,WAAW,CAAC,CAAC;EAE9BJ,SAAS,CAAC,MAAM;IACdG,MAAM,CAACiB,EAAE,CAAC,kBAAkB,EAAGC,gBAA0B,IAAK;MAC5DF,QAAQ,CAACd,QAAQ,CAACgB,gBAAgB,CAAC,CAAC;IACtC,CAAC,CAAC;IAEF,MAAMC,qBAAqB,GAAGA,CAAC;MAC7BjB,QAAQ,EAAEkB,cAAc;MACxBb;IAIF,CAAC,KAAK;MACJc,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEb,QAAQ,CAAC,EAAC;MAC3CC,WAAW,CAAEa,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;QAAErB,QAAQ,EAAEkB,cAAc;QAAEb;MAAQ,CAAC,CACtC,CAAC;IACJ,CAAC;IAEDP,MAAM,CAACiB,EAAE,CAAC,iBAAiB,EAAEE,qBAAqB,CAAC;;IAEnD;IACA,OAAO,MAAM;MACXnB,MAAM,CAACwB,GAAG,CAAC,kBAAkB,CAAC;MAC9BxB,MAAM,CAACwB,GAAG,CAAC,iBAAiB,EAAEL,qBAAqB,CAAC;IACtD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAI,CAAClB,OAAO,EAAE;MACZC,UAAU,CAAC,2BAA2B,CAAC;MACvC;IACF;IACAR,MAAM,CAAC0B,IAAI,CAAC,cAAc,EAAEnB,OAAO,EAAEO,YAAY,CAAC;IAClDN,UAAU,CAAC,EAAE,CAAC;EAChB,CAAC;EAED,oBACEJ,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAAuB,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACd3B,OAAA;MAAK4B,SAAS,EAAC,iBAAiB;MAAAL,QAAA,EAC7BlB,QAAQ,CAACwB,GAAG,CAAC,CAAC;QAAE/B,QAAQ;QAAEK;MAAQ,CAAC,EAAE2B,KAAK,kBACzC9B,OAAA;QAAe+B,KAAK,EAAE;UAAEC,QAAQ,EAAE,MAAM;UAAEC,KAAK,EAAE;QAAQ,CAAE;QAAAV,QAAA,GACxDzB,QAAQ,EAAC,IAAE,EAACK,OAAO;MAAA,GADd2B,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN3B,OAAA;MAAOkC,QAAQ,EAAGC,CAAC,IAAK/B,UAAU,CAAC+B,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;MAACA,KAAK,EAAElC;IAAQ;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtE3B,OAAA,CAACN,MAAM;MAAC4C,KAAK,EAAC,cAAc;MAACC,OAAO,EAAElB;IAAqB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3D,CAAC;AAEV,CAAC;AAAAzB,EAAA,CAhEKD,KAAK;EAAA,QAMgBN,WAAW,EAIfA,WAAW,EACfE,WAAW;AAAA;AAAA2C,EAAA,GAXxBvC,KAAK;AAkEX,eAAeA,KAAK;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}