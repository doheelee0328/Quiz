{"ast":null,"code":"var _jsxFileName = \"/Users/doheelee/Quiz/client/src/pages/Login.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeCharacter } from '../slices/character';\nimport { gamingRoom, setHostName, setNickname } from '../slices/player';\nimport '../scss/main.scss';\nimport Button from '../components/Buttons';\nimport { useNavigate } from 'react-router-dom';\nimport { socket } from '../socket/index';\nimport { setPlayersInRoom } from '../slices/player';\nimport { setSelectedCategory, setSelectedDifficulty } from '../slices/questions';\n\n// use redux to use the nickname and room\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const inputNicknameRef = useRef(null);\n  const [message, setMessage] = useState('');\n  const [playerName, setPlayerName] = useState('');\n\n  // const [roomName, setRoomName] = useState('')\n  const dispatch = useDispatch();\n  // redux\n  const selectedCharacter = useSelector(state => state.characterSlice.character);\n  const selectedRoom = useSelector(state => state.playerSlice.gamingRoom);\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (inputNicknameRef.current) {\n      inputNicknameRef.current.focus();\n    }\n    const storedCharacter = localStorage.getItem('character-image');\n    if (storedCharacter) {\n      dispatch(changeCharacter(storedCharacter));\n    }\n    socket.on('update-players', players => {\n      dispatch(setPlayersInRoom(players));\n    });\n    return () => {\n      socket.off('update-players');\n    };\n  }, [dispatch, selectedCharacter]);\n  const joinRoomHandler = () => {\n    if (!selectedRoom || !playerName) {\n      setMessage('Please enter your nickname and the existing room to join the game');\n      return;\n    }\n    socket.emit('join-room', selectedRoom, playerName, roomExist => {\n      if (roomExist) {\n        navigate('/lobby');\n        dispatch(setNickname(playerName));\n      } else {\n        setMessage(`The room ${selectedRoom} does not exist`);\n      }\n    });\n  };\n  const joinNewGameHandler = () => {\n    if (!playerName && !selectedRoom) {\n      setMessage('Please enter your username and room to create a quiz');\n      return;\n    } else {\n      dispatch(setNickname(playerName));\n      // set the nickname to the player name\n\n      socket.emit('create-room', selectedRoom, playerName, room => {\n        // callback function that provides the name of the room\n        if (typeof room === 'string') {\n          navigate('/game-room');\n          dispatch(setSelectedCategory(''));\n          dispatch(setSelectedDifficulty(''));\n          dispatch(setHostName(playerName)); // Dispatch setHostName after setting playerName\n        } else {\n          setMessage('The room already exists, please try again');\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [selectedCharacter && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: selectedCharacter,\n      alt: \"selected-character\",\n      className: \"selected-character\",\n      \"data-cy\": \"selected-character\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"nickname\",\n      \"data-cy\": \"nickname\",\n      children: \"Username\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: inputNicknameRef,\n      className: \"input\",\n      \"data-cy\": \"input\",\n      onChange: e => setPlayerName(e.target.value),\n      value: playerName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"nickname\",\n      \"data-cy\": \"nickname\",\n      children: \"Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"input\",\n      \"data-cy\": \"input\",\n      onChange: e => dispatch(gamingRoom(e.target.value)),\n      value: selectedRoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"start-game-container\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        title: \"Create Room\",\n        onClick: joinNewGameHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        title: \"Join Game\",\n        onClick: joinRoomHandler,\n        dataCy: \"join-button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"not-entered-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"fUi2u3ah7FYcFSNWB0xyet0+q2c=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useSelector","useDispatch","changeCharacter","gamingRoom","setHostName","setNickname","Button","useNavigate","socket","setPlayersInRoom","setSelectedCategory","setSelectedDifficulty","jsxDEV","_jsxDEV","Login","_s","inputNicknameRef","message","setMessage","playerName","setPlayerName","dispatch","selectedCharacter","state","characterSlice","character","selectedRoom","playerSlice","navigate","current","focus","storedCharacter","localStorage","getItem","on","players","off","joinRoomHandler","emit","roomExist","joinNewGameHandler","room","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","type","ref","onChange","e","target","value","title","onClick","dataCy","_c","$RefreshReg$"],"sources":["/Users/doheelee/Quiz/client/src/pages/Login.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { changeCharacter } from '../slices/character'\nimport { gamingRoom, setHostName, setNickname } from '../slices/player'\nimport '../scss/main.scss'\nimport Button from '../components/Buttons'\nimport { useNavigate } from 'react-router-dom'\nimport { socket } from '../socket/index'\nimport { setPlayersInRoom } from '../slices/player'\nimport { setSelectedCategory, setSelectedDifficulty } from '../slices/questions'\n\n// use redux to use the nickname and room\nconst Login = () => {\n  const inputNicknameRef = useRef<HTMLInputElement>(null)\n  const [message, setMessage] = useState<string>('')\n  const [playerName, setPlayerName] = useState('')\n\n  // const [roomName, setRoomName] = useState('')\n  const dispatch = useDispatch()\n  // redux\n  const selectedCharacter = useSelector(\n    (state: any) => state.characterSlice.character\n  )\n  const selectedRoom = useSelector((state: any) => state.playerSlice.gamingRoom)\n\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    if (inputNicknameRef.current) {\n      inputNicknameRef.current.focus()\n    }\n\n    const storedCharacter = localStorage.getItem('character-image')\n    if (storedCharacter) {\n      dispatch(changeCharacter(storedCharacter))\n    }\n\n    socket.on('update-players', (players: string[]) => {\n      dispatch(setPlayersInRoom(players))\n    })\n    return () => {\n      socket.off('update-players')\n    }\n  }, [dispatch, selectedCharacter])\n\n  const joinRoomHandler = () => {\n    if (!selectedRoom || !playerName) {\n      setMessage(\n        'Please enter your nickname and the existing room to join the game'\n      )\n      return\n    }\n\n    socket.emit('join-room', selectedRoom, playerName, (roomExist: boolean) => {\n      if (roomExist) {\n        navigate('/lobby')\n        dispatch(setNickname(playerName))\n      } else {\n        setMessage(`The room ${selectedRoom} does not exist`)\n      }\n    })\n  }\n  const joinNewGameHandler = () => {\n    if (!playerName && !selectedRoom) {\n      setMessage('Please enter your username and room to create a quiz')\n      return\n    } else {\n      dispatch(setNickname(playerName))\n      // set the nickname to the player name\n\n      socket.emit(\n        'create-room',\n        selectedRoom,\n        playerName,\n        (room: string | boolean) => {\n          // callback function that provides the name of the room\n          if (typeof room === 'string') {\n            navigate('/game-room')\n            dispatch(setSelectedCategory(''))\n            dispatch(setSelectedDifficulty(''))\n            dispatch(setHostName(playerName)) // Dispatch setHostName after setting playerName\n          } else {\n            setMessage('The room already exists, please try again')\n          }\n        }\n      )\n    }\n  }\n\n  return (\n    <div className='login-container'>\n      {/* <Logo /> */}\n      {selectedCharacter && (\n        <img\n          src={selectedCharacter}\n          alt='selected-character'\n          className='selected-character'\n          data-cy='selected-character'\n        />\n      )}\n      <p className='nickname' data-cy='nickname'>\n        Username\n      </p>\n      <input\n        type='text'\n        ref={inputNicknameRef}\n        className='input'\n        data-cy='input'\n        onChange={(e) => setPlayerName(e.target.value)}\n        value={playerName}\n      />\n      <p className='nickname' data-cy='nickname'>\n        Room\n      </p>\n      <input\n        type='text'\n        className='input'\n        data-cy='input'\n        onChange={(e) => dispatch(gamingRoom(e.target.value))}\n        value={selectedRoom}\n      />\n\n      <div className='start-game-container'>\n        <Button title='Create Room' onClick={joinNewGameHandler} />\n        <Button\n          title='Join Game'\n          onClick={joinRoomHandler}\n          dataCy='join-button'\n        />\n      </div>\n\n      {message && <p className='not-entered-message'>{message}</p>}\n    </div>\n  )\n}\n\nexport default Login\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}