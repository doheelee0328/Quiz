{"ast":null,"code":"var _jsxFileName = \"/Users/doheelee/Desktop/smart-duck/client/src/pages/lobby/Lobby.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Button from '../../components/Buttons';\nimport { useSelector } from 'react-redux';\nimport { socket } from '../../socket/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Lobby = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const selectedNickname = useSelector(state => state.playerSlice.nickname);\n  const selectedRoom = useSelector(state => state.playerSlice.gamingRoom);\n  socket.on('receive-message', newMessage => {\n    // Update messages state properly by either spreading the existing messages array\n    // or concatenating the new message with existing ones.\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n    console.log('New message received:', newMessage); // Check if the new message is received correctly\n  });\n\n  const submitMessageHandler = () => {\n    if (!message) {\n      setMessage('Please enter your message');\n      return;\n    } else {\n      // Emitting the message along with the room information\n      socket.emit('send-message', message, selectedRoom);\n    }\n    // setMessage('')\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lobby\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lobby-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: '4rem'\n        },\n        children: [selectedNickname && selectedNickname, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'white'\n        },\n        children: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => setMessage(e.target.value),\n      value: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      title: \"Send Message\",\n      onClick: submitMessageHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(Lobby, \"nkrxyuGeWABIMdHc43/6fkD4r9o=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = Lobby;\nexport default Lobby;\nvar _c;\n$RefreshReg$(_c, \"Lobby\");","map":{"version":3,"names":["React","useState","Button","useSelector","socket","jsxDEV","_jsxDEV","Lobby","_s","message","setMessage","messages","setMessages","selectedNickname","state","playerSlice","nickname","selectedRoom","gamingRoom","on","newMessage","prevMessages","console","log","submitMessageHandler","emit","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","fontSize","map","index","color","onChange","e","target","value","title","onClick","_c","$RefreshReg$"],"sources":["/Users/doheelee/Desktop/smart-duck/client/src/pages/lobby/Lobby.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport Button from '../../components/Buttons'\nimport { useSelector } from 'react-redux'\nimport { socket } from '../../socket/index'\n\nconst Lobby = () => {\n  const [message, setMessage] = useState('')\n  const [messages, setMessages] = useState<string[]>([])\n\n  const selectedNickname = useSelector(\n    (state: any) => state.playerSlice.nickname\n  )\n  const selectedRoom = useSelector((state: any) => state.playerSlice.gamingRoom)\n\n  socket.on('receive-message', (newMessage: string) => {\n    // Update messages state properly by either spreading the existing messages array\n    // or concatenating the new message with existing ones.\n    setMessages((prevMessages) => [...prevMessages, newMessage])\n    console.log('New message received:', newMessage) // Check if the new message is received correctly\n  })\n\n  const submitMessageHandler = () => {\n    if (!message) {\n      setMessage('Please enter your message')\n      return\n    } else {\n      // Emitting the message along with the room information\n      socket.emit('send-message', message, selectedRoom)\n    }\n    // setMessage('')\n  }\n\n  return (\n    <div>\n      <h1>Lobby</h1>\n      <div className='lobby-container'>\n        <p style={{ fontSize: '4rem' }}>\n          {selectedNickname && selectedNickname}:\n        </p>\n        {messages.map((message, index) => (\n          <p key={index} style={{ color: 'white' }}>\n            {message}\n          </p>\n        ))}\n      </div>\n      <input onChange={(e) => setMessage(e.target.value)} value={message} />\n      <Button title='Send Message' onClick={submitMessageHandler} />\n    </div>\n  )\n}\n\nexport default Lobby\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}