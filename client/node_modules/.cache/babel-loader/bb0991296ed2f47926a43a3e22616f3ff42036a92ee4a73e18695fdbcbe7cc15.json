{"ast":null,"code":"var _jsxFileName = \"/Users/doheelee/Quiz/client/src/pages/Questions.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setScore } from '../slices/questions';\nimport Button from '../components/Buttons';\nimport { useNavigate } from 'react-router-dom';\nimport '../scss/main.scss';\nimport Spinner from '../components/Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Questions = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectOption, setSelectOption] = useState('');\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [shuffledOptions, setShuffledOptions] = useState([]);\n  const [message, setMessage] = useState('');\n  const [timer, setTimer] = useState(20);\n  const selectedCategory = useSelector(state => state.questionSlice.selectedCategory);\n  const difficulty = useSelector(state => state.questionSlice.selectedDifficulty);\n  const score = useSelector(state => state.questionSlice.score);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const fetchQuestions = async (retryCount = 3) => {\n    try {\n      const response = await fetch(`https://opentdb.com/api.php?amount=5&category=${selectedCategory.id}&difficulty=${difficulty}&type=multiple`);\n      if (response.status === 429) {\n        const retryAfter = response.headers.get('Retry-After');\n        const delay = retryAfter ? parseInt(retryAfter) * 1000 : 1000; // Default to 1 second delay if no Retry-After header provided\n\n        if (retryCount > 0) {\n          setTimeout(() => {\n            fetchQuestions(retryCount - 1);\n          }, delay);\n        } else {\n          // Handle error or display a message\n          console.error('API rate limit exceeded');\n          // Optionally, set loading state to false to stop continuous loading\n          setLoading(false);\n        }\n        return;\n      }\n      const data = await response.json();\n      setQuestions(data.results);\n      setLoading(false);\n    } catch (error) {\n      console.error(error);\n      if (retryCount > 0) {\n        setTimeout(() => {\n          fetchQuestions(retryCount - 1);\n        }, 1000); // Retry after 1 second\n      } else {\n        // Handle error or display a message\n        console.error('Error fetching data');\n        // Optionally, set loading state to false to stop continuous loading\n        setLoading(false);\n      }\n    }\n  };\n  useEffect(() => {\n    if (questions.length > 0) {\n      const shuffled = shuffleQuestions(questions[currentQuestionIndex].correct_answer, questions[currentQuestionIndex].incorrect_answers);\n      setShuffledOptions(shuffled);\n      setTimer(20);\n    }\n  }, [questions, currentQuestionIndex]);\n  const shuffleQuestions = (correctAnswer, incorrectAnswer) => {\n    const options = [...incorrectAnswer, correctAnswer];\n    return options.sort(() => Math.random() - 0.5);\n  };\n  const handleSelectOption = (option, correctAnswer) => {\n    setSelectOption(option);\n    if (option === correctAnswer) {\n      dispatch(setScore(score + 1));\n    }\n  };\n  const handleNextQuestion = () => {\n    if (!selectOption) {\n      setMessage('Please select an answer');\n      return;\n    } else if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setSelectOption('');\n      setMessage('');\n      setTimer(20);\n    }\n  };\n  const handleCompletedPage = () => {\n    if (!selectOption) {\n      setMessage('Please select an answer');\n      return;\n    }\n    navigate('/completed');\n    setMessage('');\n  };\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      setTimer(prevTime => {\n        if (prevTime === 0) {\n          clearInterval(timerId);\n          if (currentQuestionIndex === questions.length - 1) {\n            navigate('/completed');\n          } else {\n            setCurrentQuestionIndex(currentQuestionIndex + 1);\n            setMessage('');\n            return 20; // Reset the timer to 20 when moving to the next question\n          }\n        }\n\n        return prevTime - 1;\n      });\n    }, 1000);\n\n    // Clean up interval on component unmount\n    return () => clearInterval(timerId);\n  }, [currentQuestionIndex, questions]);\n  useEffect(() => {\n    fetchQuestions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spinner\",\n      children: /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this) : questions && questions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"questions-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"timer-container\",\n          children: [\"Time left \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"timer\",\n            children: timer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-answer-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"questions\",\n            children: questions[currentQuestionIndex].question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"questions-answers\",\n            children: shuffledOptions.map((option, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                title: option,\n                onClick: () => handleSelectOption(option, questions[currentQuestionIndex].correct_answer),\n                active: selectOption === option\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 23\n              }, this)\n            }, void 0, false))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 17\n          }, this), currentQuestionIndex === questions.length - 1 ? /*#__PURE__*/_jsxDEV(Button, {\n            title: \"Submit Quiz\",\n            onClick: handleCompletedPage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            title: \"Next Question\",\n            onClick: handleNextQuestion\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-container\",\n          children: [selectOption ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"selected-option\",\n            children: `You have selected ${selectOption}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 19\n          }, this) : message && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-selected-message\",\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"out-of-questions\",\n            children: `${currentQuestionIndex + 1}/5 questions`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n_s(Questions, \"spl6lCotVsGJvMtHGZNJXG0HMWU=\", false, function () {\n  return [useSelector, useSelector, useSelector, useNavigate, useDispatch];\n});\n_c = Questions;\nexport default Questions;\nvar _c;\n$RefreshReg$(_c, \"Questions\");","map":{"version":3,"names":["React","useEffect","useState","useSelector","useDispatch","setScore","Button","useNavigate","Spinner","jsxDEV","_jsxDEV","Fragment","_Fragment","Questions","_s","questions","setQuestions","loading","setLoading","selectOption","setSelectOption","currentQuestionIndex","setCurrentQuestionIndex","shuffledOptions","setShuffledOptions","message","setMessage","timer","setTimer","selectedCategory","state","questionSlice","difficulty","selectedDifficulty","score","navigate","dispatch","fetchQuestions","retryCount","response","fetch","id","status","retryAfter","headers","get","delay","parseInt","setTimeout","console","error","data","json","results","length","shuffled","shuffleQuestions","correct_answer","incorrect_answers","correctAnswer","incorrectAnswer","options","sort","Math","random","handleSelectOption","option","handleNextQuestion","handleCompletedPage","timerId","setInterval","prevTime","clearInterval","children","className","fileName","_jsxFileName","lineNumber","columnNumber","question","map","index","title","onClick","active","_c","$RefreshReg$"],"sources":["/Users/doheelee/Quiz/client/src/pages/Questions.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setScore } from '../slices/questions'\nimport Button from '../components/Buttons'\nimport { useNavigate } from 'react-router-dom'\nimport '../scss/main.scss'\nimport Spinner from '../components/Spinner'\n\nconst Questions = () => {\n  const [questions, setQuestions] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [selectOption, setSelectOption] = useState('')\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\n  const [shuffledOptions, setShuffledOptions] = useState<string[]>([])\n  const [message, setMessage] = useState('')\n  const [timer, setTimer] = useState(20)\n\n  const selectedCategory = useSelector(\n    (state: any) => state.questionSlice.selectedCategory\n  )\n  const difficulty = useSelector(\n    (state: any) => state.questionSlice.selectedDifficulty\n  )\n  const score = useSelector((state: any) => state.questionSlice.score)\n\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n\n  const fetchQuestions = async (retryCount = 3) => {\n    try {\n      const response = await fetch(\n        `https://opentdb.com/api.php?amount=5&category=${selectedCategory.id}&difficulty=${difficulty}&type=multiple`\n      )\n\n      if (response.status === 429) {\n        const retryAfter = response.headers.get('Retry-After')\n        const delay = retryAfter ? parseInt(retryAfter) * 1000 : 1000 // Default to 1 second delay if no Retry-After header provided\n\n        if (retryCount > 0) {\n          setTimeout(() => {\n            fetchQuestions(retryCount - 1)\n          }, delay)\n        } else {\n          // Handle error or display a message\n          console.error('API rate limit exceeded')\n          // Optionally, set loading state to false to stop continuous loading\n          setLoading(false)\n        }\n\n        return\n      }\n\n      const data = await response.json()\n      setQuestions(data.results)\n      setLoading(false)\n    } catch (error) {\n      console.error(error)\n      if (retryCount > 0) {\n        setTimeout(() => {\n          fetchQuestions(retryCount - 1)\n        }, 1000) // Retry after 1 second\n      } else {\n        // Handle error or display a message\n        console.error('Error fetching data')\n        // Optionally, set loading state to false to stop continuous loading\n        setLoading(false)\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (questions.length > 0) {\n      const shuffled = shuffleQuestions(\n        questions[currentQuestionIndex].correct_answer,\n        questions[currentQuestionIndex].incorrect_answers\n      )\n      setShuffledOptions(shuffled)\n      setTimer(20)\n    }\n  }, [questions, currentQuestionIndex])\n\n  const shuffleQuestions = (\n    correctAnswer: string,\n    incorrectAnswer: string[]\n  ) => {\n    const options = [...incorrectAnswer, correctAnswer]\n    return options.sort(() => Math.random() - 0.5)\n  }\n\n  const handleSelectOption = (option: string, correctAnswer: string) => {\n    setSelectOption(option)\n    if (option === correctAnswer) {\n      dispatch(setScore(score + 1))\n    }\n  }\n\n  const handleNextQuestion = () => {\n    if (!selectOption) {\n      setMessage('Please select an answer')\n      return\n    } else if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1)\n      setSelectOption('')\n      setMessage('')\n      setTimer(20)\n    }\n  }\n\n  const handleCompletedPage = () => {\n    if (!selectOption) {\n      setMessage('Please select an answer')\n      return\n    }\n    navigate('/completed')\n    setMessage('')\n  }\n\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      setTimer((prevTime) => {\n        if (prevTime === 0) {\n          clearInterval(timerId)\n          if (currentQuestionIndex === questions.length - 1) {\n            navigate('/completed')\n          } else {\n            setCurrentQuestionIndex(currentQuestionIndex + 1)\n            setMessage('')\n            return 20 // Reset the timer to 20 when moving to the next question\n          }\n        }\n        return prevTime - 1\n      })\n    }, 1000)\n\n    // Clean up interval on component unmount\n    return () => clearInterval(timerId)\n  }, [currentQuestionIndex, questions])\n\n  useEffect(() => {\n    fetchQuestions()\n  }, [])\n\n  return (\n    <div>\n      {loading ? (\n        <div className='spinner'>\n          <Spinner />\n        </div>\n      ) : (\n        questions &&\n        questions.length > 0 && (\n          <div>\n            <div className='questions-container'>\n              <p className='timer-container'>\n                Time left <span className='timer'>{timer}</span>\n              </p>\n\n              <div className='question-answer-container'>\n                <p className='questions'>\n                  {questions[currentQuestionIndex].question}\n                </p>\n                <div className='questions-answers'>\n                  {shuffledOptions.map((option, index) => (\n                    <>\n                      <Button\n                        key={index}\n                        title={option}\n                        onClick={() =>\n                          handleSelectOption(\n                            option,\n                            questions[currentQuestionIndex].correct_answer\n                          )\n                        }\n                        active={selectOption === option}\n                      />\n                    </>\n                  ))}\n                </div>\n                {currentQuestionIndex === questions.length - 1 ? (\n                  <Button title='Submit Quiz' onClick={handleCompletedPage} />\n                ) : (\n                  <Button title='Next Question' onClick={handleNextQuestion} />\n                )}\n              </div>\n              <div className='bottom-container'>\n                {selectOption ? (\n                  <p className='selected-option'>{`You have selected ${selectOption}`}</p>\n                ) : (\n                  message && <p className='error-selected-message'>{message}</p>\n                )}\n\n                <p className='out-of-questions'>{`${\n                  currentQuestionIndex + 1\n                }/5 questions`}</p>\n              </div>\n            </div>\n          </div>\n        )\n      )}\n    </div>\n  )\n}\n\nexport default Questions\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}