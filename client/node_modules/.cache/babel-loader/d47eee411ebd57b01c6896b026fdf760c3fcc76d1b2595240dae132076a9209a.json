{"ast":null,"code":"var _jsxFileName = \"/Users/doheelee/Desktop/smart-duck/client/src/pages/lobby/Lobby.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Button from '../../components/Buttons';\nimport { useSelector } from 'react-redux';\nimport { socket } from '../../socket/index';\nimport { useDispatch } from 'react-redux';\nimport { nickname } from '../../slices/player';\nimport Logo from '../../components/Logo';\nimport MessageLogo from '../../images/send-message-icon.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Lobby = () => {\n  _s();\n  const initialState = {\n    message: '',\n    messages: []\n  };\n  const [message, setMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [playersInRoom, setPlayersInRoom] = useState([]);\n  const [playerCount, setPlayerCount] = useState([]);\n  const selectedRoom = useSelector(state => state.playerSlice.gamingRoom);\n  const selectedNickname = useSelector(state => state.playerSlice.nickname);\n  const selectedCharacter = useSelector(state => state.characterSlice.character);\n  const dispatch = useDispatch();\n  console.log(selectedNickname);\n  useEffect(() => {\n    socket.on('update-nicknames', updatedNicknames => {\n      if (!updatedNicknames.includes(selectedNickname)) {\n        dispatch(nickname(updatedNicknames));\n      }\n    });\n    socket.on('previous-messages', previousMessages => {\n      setMessages(previousMessages);\n    });\n    socket.on('playerData', allPlayersInRoom => {\n      setPlayersInRoom(allPlayersInRoom);\n      setPlayerCount(allPlayersInRoom.length);\n    });\n    const receiveMessageHandler = ({\n      nickname: senderNickname,\n      message,\n      character\n    }) => {\n      setMessages(prevMessages => [...prevMessages, {\n        nickname: senderNickname,\n        message,\n        character\n      }]);\n    };\n    socket.on('receive-message', receiveMessageHandler);\n\n    // Cleanup function repeated messages\n    return () => {\n      socket.off('update-nicknames');\n      socket.off('receive-message', receiveMessageHandler);\n    };\n  }, []);\n  const submitMessageHandler = () => {\n    if (!message) {\n      setErrorMessage('Please enter your message');\n      return;\n    }\n    socket.emit('send-message', message, selectedRoom, selectedCharacter);\n    setMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lobby-container\",\n    children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"lobby-title\",\n      children: \"Lobby\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"lobby-waiting-sentence\",\n      children: \"Waiting for the host to start the game....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"players-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Players in room: \", playerCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), playersInRoom.map((playerInfo, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"p-players\",\n        children: [\"Playername: \", playerInfo]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logo-message-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lobby-message-box\",\n        children: messages.map(({\n          nickname,\n          message,\n          character\n        }, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"character-message-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: character,\n              alt: \"chosen-character-images\",\n              className: \"character-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"chat-message\",\n              children: [nickname, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"chat-message\",\n              children: message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lobby-input-message-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setMessage(e.target.value),\n          value: message,\n          className: \"lobby-input\",\n          placeholder: \"Enter your message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: MessageLogo,\n          alt: \"message-logo\",\n          className: \"message-logo\",\n          onClick: submitMessageHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      title: \"Start The Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"lobby-message\",\n      children: errorMessage && errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(Lobby, \"GcPmmzWj5jNLXPjlT5O0LvjfCUM=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n_c = Lobby;\nexport default Lobby;\nvar _c;\n$RefreshReg$(_c, \"Lobby\");","map":{"version":3,"names":["React","useState","useEffect","Button","useSelector","socket","useDispatch","nickname","Logo","MessageLogo","jsxDEV","_jsxDEV","Lobby","_s","initialState","message","messages","setMessage","errorMessage","setErrorMessage","setMessages","playersInRoom","setPlayersInRoom","playerCount","setPlayerCount","selectedRoom","state","playerSlice","gamingRoom","selectedNickname","selectedCharacter","characterSlice","character","dispatch","console","log","on","updatedNicknames","includes","previousMessages","allPlayersInRoom","length","receiveMessageHandler","senderNickname","prevMessages","off","submitMessageHandler","emit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","playerInfo","index","src","alt","onChange","e","target","value","placeholder","onClick","title","_c","$RefreshReg$"],"sources":["/Users/doheelee/Desktop/smart-duck/client/src/pages/lobby/Lobby.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useReducer } from 'react'\nimport Button from '../../components/Buttons'\nimport { useSelector } from 'react-redux'\nimport { socket } from '../../socket/index'\nimport { useDispatch } from 'react-redux'\nimport { nickname } from '../../slices/player'\nimport Logo from '../../components/Logo'\nimport MessageLogo from '../../images/send-message-icon.png'\n\ntype LobbyState = {\n  message: string\n  messages: Array<string>\n}\n\nconst Lobby = () => {\n  const initialState: LobbyState = {\n    message: '',\n    messages: [],\n  }\n  const [message, setMessage] = useState('')\n  const [errorMessage, setErrorMessage] = useState('')\n  const [messages, setMessages] = useState<\n    { nickname: string; message: string; character: string }[]\n  >([])\n  const [playersInRoom, setPlayersInRoom] = useState([])\n  const [playerCount, setPlayerCount] = useState([])\n\n  const selectedRoom = useSelector((state: any) => state.playerSlice.gamingRoom)\n  const selectedNickname = useSelector(\n    (state: any) => state.playerSlice.nickname\n  )\n  const selectedCharacter = useSelector(\n    (state: any) => state.characterSlice.character\n  )\n  const dispatch = useDispatch()\n\n  console.log(selectedNickname)\n  useEffect(() => {\n    socket.on('update-nicknames', (updatedNicknames: string[]) => {\n      if (!updatedNicknames.includes(selectedNickname)) {\n        dispatch(nickname(updatedNicknames))\n      }\n    })\n\n    socket.on('previous-messages', (previousMessages) => {\n      setMessages(previousMessages)\n    })\n\n    socket.on('playerData', (allPlayersInRoom) => {\n      setPlayersInRoom(allPlayersInRoom)\n      setPlayerCount(allPlayersInRoom.length)\n    })\n\n    const receiveMessageHandler = ({\n      nickname: senderNickname,\n      message,\n      character,\n    }: {\n      nickname: string\n      message: string\n      character: string\n    }) => {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { nickname: senderNickname, message, character },\n      ])\n    }\n\n    socket.on('receive-message', receiveMessageHandler)\n\n    // Cleanup function repeated messages\n    return () => {\n      socket.off('update-nicknames')\n      socket.off('receive-message', receiveMessageHandler)\n    }\n  }, [])\n\n  const submitMessageHandler = () => {\n    if (!message) {\n      setErrorMessage('Please enter your message')\n      return\n    }\n    socket.emit('send-message', message, selectedRoom, selectedCharacter)\n    setMessage('')\n  }\n\n  return (\n    <div className='lobby-container'>\n      <Logo />\n      <h1 className='lobby-title'>Lobby</h1>\n      <p className='lobby-waiting-sentence'>\n        Waiting for the host to start the game....\n      </p>\n      <div className='players-container'>\n        <h3>Players in room: {playerCount}</h3>\n        <hr />\n        {playersInRoom.map((playerInfo, index) => (\n          <p className='p-players' key={index}>\n            Playername: {playerInfo}\n          </p>\n        ))}\n      </div>\n      <div className='logo-message-container'>\n        <div className='lobby-message-box'>\n          {messages.map(({ nickname, message, character }, index) => (\n            <div key={index}>\n              <div className='character-message-container'>\n                <img\n                  src={character}\n                  alt='chosen-character-images'\n                  className='character-image'\n                />\n\n                <span className='chat-message'>{nickname}:</span>\n                <span className='chat-message'>{message}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n        <div className='lobby-input-message-container'>\n          <input\n            onChange={(e) => setMessage(e.target.value)}\n            value={message}\n            className='lobby-input'\n            placeholder='Enter your message'\n          />\n          <img\n            src={MessageLogo}\n            alt='message-logo'\n            className='message-logo'\n            onClick={submitMessageHandler}\n          />\n        </div>\n      </div>\n      <Button title='Start The Quiz' />\n      <p className='lobby-message'>{errorMessage && errorMessage}</p>\n    </div>\n  )\n}\n\nexport default Lobby\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}