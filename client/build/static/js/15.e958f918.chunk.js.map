{"version":3,"file":"static/js/15.e958f918.chunk.js","mappings":"yIAsBA,IAZe,SAAHA,GAAyD,IAAnDC,EAAKD,EAALC,MAAOC,EAAOF,EAAPE,QAASC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OACxC,OACEC,EAAAA,EAAAA,KAAA,UACEC,UAAS,oBAAAC,OAAsBH,EAAS,SAAW,IACnDF,QAASA,EACT,UAASC,EAAOK,SAEfP,GAGP,C,2KCPA,EAVoB,SAAHD,GAAoC,IAA9BS,EAAIT,EAAJS,KACrB,OACEJ,EAAAA,EAAAA,KAAA,OAAAG,UACEH,EAAAA,EAAAA,KAAA,MAAIC,UAAU,cAAaE,SACxBC,EAAO,OAAS,2CAIzB,ECuJA,EAjJc,WACZ,IAAAC,GAA8BC,EAAAA,EAAAA,UAAiB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,GAAwCL,EAAAA,EAAAA,UAAiB,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAArDE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,GAAgCT,EAAAA,EAAAA,UAA+B,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA3DE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAAsCb,EAAAA,EAAAA,WAAkB,GAAMc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAAvDE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAE5BG,GAAeC,EAAAA,EAAAA,KAAY,SAACC,GAAU,OAAKA,EAAMC,YAAYC,UAAU,IACvEC,GAAgBJ,EAAAA,EAAAA,KACpB,SAACC,GAAU,OAAKA,EAAMC,YAAYE,aAAa,IAE3CC,GAAoBL,EAAAA,EAAAA,KACxB,SAACC,GAAU,OAAKA,EAAMK,eAAeC,SAAS,IAE1CC,GAAWR,EAAAA,EAAAA,KAAY,SAACC,GAAU,OAAKA,EAAMC,YAAYM,QAAQ,IACjEC,GAAmBT,EAAAA,EAAAA,KACvB,SAACC,GAAU,OAAKA,EAAMS,cAAcD,gBAAgB,IAEhDE,GAAaX,EAAAA,EAAAA,KACjB,SAACC,GAAU,OAAKA,EAAMS,cAAcE,kBAAkB,IAGlDC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAOC,GAAG,oBAAoB,SAACC,GAC7BP,GAASQ,EAAAA,EAAAA,IAAiBD,GAC5B,IAEAF,EAAAA,EAAOC,GAAG,qBAAqB,SAACG,GAC9B5B,EAAY4B,EACd,IAEA,IAAMC,EAAwB,SAAHpD,GAQpB,IAPKqD,EAAcrD,EAAxBsD,SACAxC,EAAOd,EAAPc,QACAsB,EAASpC,EAAToC,UAMAb,GAAY,SAACgC,GAAY,SAAAhD,QAAAiD,EAAAA,EAAAA,GACpBD,GAAY,CACf,CAAED,SAAUD,EAAgBvC,QAAAA,EAASsB,UAAAA,IAAW,GAEpD,EAOA,OALAW,EAAAA,EAAOC,GAAG,kBAAmBI,GAC7BL,EAAAA,EAAOC,GAAG,cAAc,WACtBJ,EAAS,SACX,IAEO,WACLG,EAAAA,EAAOU,IAAI,oBACXV,EAAAA,EAAOU,IAAI,kBAAmBL,GAC9BL,EAAAA,EAAOU,IAAI,cACXV,EAAAA,EAAOU,IAAI,aACb,CACF,GAAG,IAeH,OACEC,EAAAA,EAAAA,MAAA,OAAKpD,UAAU,kBAAiBE,SAAA,EAC9BH,EAAAA,EAAAA,KAAA,MAAIC,UAAU,cAAaE,SAAC,WAE5BkD,EAAAA,EAAAA,MAAA,OAAKpD,UAAU,oBAAmBE,SAAA,EAChCkD,EAAAA,EAAAA,MAAA,MAAIpD,UAAU,oBAAmBE,SAAA,CAAC,oBAEhCH,EAAAA,EAAAA,KAAA,QAAMC,UAAU,oBAAmBE,SAAEyB,EAAc0B,aAGrDtD,EAAAA,EAAAA,KAACuD,EAAW,CAACnD,KAAM4B,IAClBJ,EAAc4B,KAAI,SAACC,EAAoBC,GAAa,OACnDL,EAAAA,EAAAA,MAAA,KAAGpD,UAAU,UAASE,SAAA,CAAa,gBACnBsD,IADYC,EAExB,OAGPrC,IACCgC,EAAAA,EAAAA,MAAA,OAAKpD,UAAU,yBAAwBE,SAAA,EACrCH,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBE,SAC/Bc,EAASuC,KAAI,SAAAG,EAAmCD,GAAK,IAArCT,EAAQU,EAARV,SAAUxC,EAAOkD,EAAPlD,QAASsB,EAAS4B,EAAT5B,UAAS,OAC3C/B,EAAAA,EAAAA,KAAA,OAAAG,UACEkD,EAAAA,EAAAA,MAAA,OAAKpD,UAAU,8BAA6BE,SAAA,EAC1CH,EAAAA,EAAAA,KAAA,OACE4D,IAAK7B,EACL8B,IAAI,0BACJ5D,UAAU,qBAEZoD,EAAAA,EAAAA,MAAA,QAAMpD,UAAU,eAAcE,SAAA,CAAE8C,EAAS,QACzCjD,EAAAA,EAAAA,KAAA,QAAMC,UAAU,eAAcE,SAAEM,QAR1BiD,EAUJ,OAGVL,EAAAA,EAAAA,MAAA,OAAKpD,UAAU,gCAA+BE,SAAA,EAC5CH,EAAAA,EAAAA,KAAA,SACE8D,SAAU,SAACC,GAAC,OAAKrD,EAAWqD,EAAEC,OAAOC,MAAM,EAC3CA,MAAOxD,EACPR,UAAU,eACViE,YAAY,wBAEdlE,EAAAA,EAAAA,KAAA,OACE4D,I,i4BACAC,IAAI,eACJ5D,UAAU,eACVJ,QAtDiB,WACtBY,GAILiC,EAAAA,EAAOyB,KAAK,eAAgB1D,EAASc,EAAcM,GACnDnB,EAAW,KAJTI,EAAgB,4BAKpB,WAqDIuC,EAAAA,EAAAA,MAAA,OAAKpD,UAAU,yBAAwBE,SAAA,CACpC6B,IACChC,EAAAA,EAAAA,KAACoE,EAAAA,EAAM,CAACxE,MAAM,iBAAiBC,QAlER,WAC7B6C,EAAAA,EAAOyB,KAAK,aAAc5C,EAC5B,KAmEMvB,EAAAA,EAAAA,KAACoE,EAAAA,EAAM,CACLxE,MAAM,gCACNC,QAAS,kBAAMyB,GAAgBD,EAAY,QAG/CrB,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBAAeE,SAAEU,GAAgBA,KAC9Cb,EAAAA,EAAAA,KAAA,KAAGC,UAAU,0BAAyBE,SACnC8B,GACCE,GAAU,yBAAAjC,OACe+B,EAAiBoC,KAAI,uBAAAnE,OAAsBiC,OAI9E,C,2DC9JMO,GAAS4B,E,QAAAA,IADQ,2C","sources":["components/Buttons.tsx","components/LobbyStatus.tsx","pages/Lobby.tsx","socket/index.ts"],"sourcesContent":["import React from 'react'\nimport '../scss/main.scss'\n\ninterface ButtonProps {\n  title: string\n  onClick?: () => void\n  dataCy?: string\n  active?: boolean\n}\n\nconst Button = ({ title, onClick, dataCy, active }: ButtonProps) => {\n  return (\n    <button\n      className={`character-button ${active ? 'active' : ''}`}\n      onClick={onClick}\n      data-cy={dataCy}\n    >\n      {title}\n    </button>\n  )\n}\n\nexport default Button\n","import React from 'react'\nimport '../scss/main.scss'\n\nconst LobbyStatus = ({ host }: { host: string }) => {\n  return (\n    <div>\n      <h3 className='host-player'>\n        {host ? 'Host' : 'Waiting for host to start the game...'}\n      </h3>\n    </div>\n  )\n}\n\nexport default LobbyStatus\n","import React, { useState, useEffect, useRef, useReducer } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport Button from '../components/Buttons'\nimport { useSelector } from 'react-redux'\nimport { socket } from '../socket/index'\nimport { useDispatch } from 'react-redux'\nimport { setPlayersInRoom } from '../slices/player'\nimport MessageLogo from '../images/send-message-icon.png'\nimport '../scss/main.scss'\nimport LobbyStatus from '../components/LobbyStatus'\n\ninterface MessagesState {\n  nickname: string\n  message: string\n  character: string\n}\n\nconst Lobby = () => {\n  const [message, setMessage] = useState<string>('')\n  const [errorMessage, setErrorMessage] = useState<string>('')\n  const [messages, setMessages] = useState<Array<MessagesState>>([])\n  const [showMessage, setShowMessage] = useState<boolean>(false)\n\n  const selectedRoom = useSelector((state: any) => state.playerSlice.gamingRoom)\n  const playersInRoom = useSelector(\n    (state: any) => state.playerSlice.playersInRoom\n  )\n  const selectedCharacter = useSelector(\n    (state: any) => state.characterSlice.character\n  )\n  const hostName = useSelector((state: any) => state.playerSlice.hostName)\n  const selectedCategory = useSelector(\n    (state: any) => state.questionSlice.selectedCategory\n  )\n  const difficulty = useSelector(\n    (state: any) => state.questionSlice.selectedDifficulty\n  )\n\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    socket.on('update-nicknames', (updatedNicknames) => {\n      dispatch(setPlayersInRoom(updatedNicknames))\n    })\n\n    socket.on('previous-messages', (previousMessages) => {\n      setMessages(previousMessages)\n    })\n\n    const receiveMessageHandler = ({\n      nickname: senderNickname,\n      message,\n      character,\n    }: {\n      nickname: string\n      message: string\n      character: string\n    }) => {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { nickname: senderNickname, message, character },\n      ])\n    }\n\n    socket.on('receive-message', receiveMessageHandler)\n    socket.on('start-game', () => {\n      navigate('/rules')\n    })\n\n    return () => {\n      socket.off('update-nicknames')\n      socket.off('receive-message', receiveMessageHandler)\n      socket.off('playerData')\n      socket.off('start-game')\n    }\n  }, [])\n\n  const navigateToQuestionPage = () => {\n    socket.emit('start-game', selectedRoom)\n  }\n\n  const submitMessageHandler = () => {\n    if (!message) {\n      setErrorMessage('Please enter your message')\n      return\n    }\n    socket.emit('send-message', message, selectedRoom, selectedCharacter)\n    setMessage('')\n  }\n\n  return (\n    <div className='lobby-container'>\n      <h1 className='lobby-title'>Lobby</h1>\n\n      <div className='players-container'>\n        <h3 className='number-of-players'>\n          Players in room:\n          <span className='length-of-players'>{playersInRoom.length}</span>\n        </h3>\n\n        <LobbyStatus host={hostName} />\n        {playersInRoom.map((playerInfo: string, index: number) => (\n          <p className='players' key={index}>\n            Player name: {playerInfo}\n          </p>\n        ))}\n      </div>\n      {showMessage && (\n        <div className='logo-message-container'>\n          <div className='lobby-message-box'>\n            {messages.map(({ nickname, message, character }, index) => (\n              <div key={index}>\n                <div className='character-message-container'>\n                  <img\n                    src={character}\n                    alt='chosen-character-images'\n                    className='character-image'\n                  />\n                  <span className='chat-message'>{nickname}:</span>\n                  <span className='chat-message'>{message}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className='lobby-input-message-container'>\n            <input\n              onChange={(e) => setMessage(e.target.value)}\n              value={message}\n              className='lobby-input '\n              placeholder='Enter your message'\n            />\n            <img\n              src={MessageLogo}\n              alt='message-logo'\n              className='message-logo'\n              onClick={submitMessageHandler}\n            />\n          </div>\n        </div>\n      )}\n\n      <div className='lobby-button-container'>\n        {hostName && (\n          <Button title='Start The Quiz' onClick={navigateToQuestionPage} />\n        )}\n\n        <Button\n          title='Send Messages To Your Players'\n          onClick={() => setShowMessage(!showMessage)}\n        />\n      </div>\n      <p className='lobby-message'>{errorMessage && errorMessage}</p>\n      <p className='selected-level-category'>\n        {selectedCategory &&\n          difficulty &&\n          `The host has selected ${selectedCategory.name} with the level of ${difficulty}`}\n      </p>\n    </div>\n  )\n}\n\nexport default Lobby\n","import io from 'socket.io-client'\nconst serverEndpoint = 'https://quiz-socket-backend.onrender.com'\nconst socket = io(serverEndpoint)\n\nexport { socket }\n"],"names":["_ref","title","onClick","dataCy","active","_jsx","className","concat","children","host","_useState","useState","_useState2","_slicedToArray","message","setMessage","_useState3","_useState4","errorMessage","setErrorMessage","_useState5","_useState6","messages","setMessages","_useState7","_useState8","showMessage","setShowMessage","selectedRoom","useSelector","state","playerSlice","gamingRoom","playersInRoom","selectedCharacter","characterSlice","character","hostName","selectedCategory","questionSlice","difficulty","selectedDifficulty","dispatch","useDispatch","navigate","useNavigate","useEffect","socket","on","updatedNicknames","setPlayersInRoom","previousMessages","receiveMessageHandler","senderNickname","nickname","prevMessages","_toConsumableArray","off","_jsxs","length","LobbyStatus","map","playerInfo","index","_ref2","src","alt","onChange","e","target","value","placeholder","emit","Button","name","io"],"sourceRoot":""}