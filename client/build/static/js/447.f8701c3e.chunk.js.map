{"version":3,"file":"static/js/447.f8701c3e.chunk.js","mappings":"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","sources":["components/Buttons.tsx","components/Spinner.tsx","pages/Questions.tsx"],"sourcesContent":["import React from 'react'\nimport '../scss/main.scss'\n\ninterface ButtonProps {\n  title: string\n  onClick?: () => void\n  dataCy?: string\n  active?: boolean\n}\n\nconst Button = ({ title, onClick, dataCy, active }: ButtonProps) => {\n  return (\n    <button\n      className={`character-button ${active ? 'active' : ''}`}\n      onClick={onClick}\n      data-cy={dataCy}\n    >\n      {title}\n    </button>\n  )\n}\n\nexport default Button\n","import React from 'react'\nimport { Oval } from 'react-loader-spinner'\n\nconst Spinner = () => {\n  return (\n    <Oval\n      visible={true}\n      height='100'\n      width='100'\n      color='#ffd256'\n      secondaryColor='#ffd256'\n      ariaLabel='oval-loading'\n    />\n  )\n}\n\nexport default Spinner\n","import React, { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setScore } from '../slices/questions'\nimport Button from '../components/Buttons'\nimport { useNavigate } from 'react-router-dom'\nimport '../scss/main.scss'\nimport Spinner from '../components/Spinner'\n\nconst Questions = () => {\n  const [questions, setQuestions] = useState<any[]>([])\n  const [loading, setLoading] = useState(true)\n  const [selectOption, setSelectOption] = useState('')\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\n  const [shuffledOptions, setShuffledOptions] = useState<string[]>([])\n  const [message, setMessage] = useState('')\n  const [timer, setTimer] = useState(20)\n\n  const selectedCategory = useSelector(\n    (state: any) => state.questionSlice.selectedCategory\n  )\n  const difficulty = useSelector(\n    (state: any) => state.questionSlice.selectedDifficulty\n  )\n  const score = useSelector((state: any) => state.questionSlice.score)\n\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n\n  const fetchQuestions = async (retryCount = 3) => {\n    try {\n      const response = await fetch(\n        `https://opentdb.com/api.php?amount=5&category=${selectedCategory.id}&difficulty=${difficulty}&type=multiple`\n      )\n\n      if (response.status === 429) {\n        const retryAfter = response.headers.get('Retry-After')\n        const delay = retryAfter ? parseInt(retryAfter) * 1000 : 1000 // Default to 1 second delay if no Retry-After header provided\n\n        if (retryCount > 0) {\n          setTimeout(() => {\n            fetchQuestions(retryCount - 1)\n          }, delay)\n        } else {\n          // Handle error or display a message\n          console.error('API rate limit exceeded')\n          // Optionally, set loading state to false to stop continuous loading\n          setLoading(false)\n        }\n\n        return\n      }\n\n      const data = await response.json()\n      setQuestions(data.results)\n      setLoading(false)\n    } catch (error) {\n      console.error(error)\n      if (retryCount > 0) {\n        setTimeout(() => {\n          fetchQuestions(retryCount - 1)\n        }, 1000) // Retry after 1 second\n      } else {\n        // Handle error or display a message\n        console.error('Error fetching data')\n        // Optionally, set loading state to false to stop continuous loading\n        setLoading(false)\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (questions.length > 0) {\n      const shuffled = shuffleQuestions(\n        questions[currentQuestionIndex].correct_answer,\n        questions[currentQuestionIndex].incorrect_answers\n      )\n      setShuffledOptions(shuffled)\n      setTimer(20)\n    }\n  }, [questions, currentQuestionIndex])\n\n  const shuffleQuestions = (\n    correctAnswer: string,\n    incorrectAnswer: string[]\n  ) => {\n    const options = [...incorrectAnswer, correctAnswer]\n    return options.sort(() => Math.random() - 0.5)\n  }\n\n  const handleSelectOption = (option: string, correctAnswer: string) => {\n    setSelectOption(option)\n    if (option === correctAnswer) {\n      dispatch(setScore(score + 1))\n    }\n  }\n\n  const handleNextQuestion = () => {\n    if (!selectOption) {\n      setMessage('Please select an answer')\n      return\n    } else if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1)\n      setSelectOption('')\n      setMessage('')\n      setTimer(20)\n    }\n  }\n\n  const handleCompletedPage = () => {\n    if (!selectOption) {\n      setMessage('Please select an answer')\n      return\n    }\n    navigate('/completed')\n    setMessage('')\n  }\n\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      setTimer((prevTime) => {\n        if (prevTime === 0) {\n          clearInterval(timerId)\n          if (currentQuestionIndex === questions.length - 1) {\n            navigate('/completed')\n          } else {\n            setCurrentQuestionIndex(currentQuestionIndex + 1)\n            setMessage('')\n            return 20 // Reset the timer to 20 when moving to the next question\n          }\n        }\n        return prevTime - 1\n      })\n    }, 1000)\n\n    // Clean up interval on component unmount\n    return () => clearInterval(timerId)\n  }, [currentQuestionIndex, questions])\n\n  useEffect(() => {\n    fetchQuestions()\n  }, [])\n\n  return (\n    <div>\n      {loading ? (\n        <div className='spinner'>\n          <Spinner />\n        </div>\n      ) : (\n        questions &&\n        questions.length > 0 && (\n          <div>\n            <div className='questions-container'>\n              <p className='timer-container'>\n                Time left <span className='timer'>{timer}</span>\n              </p>\n\n              <div className='question-answer-container'>\n                <p className='questions'>\n                  {questions[currentQuestionIndex].question}\n                </p>\n                <div className='questions-answers'>\n                  {shuffledOptions.map((option, index) => (\n                    <>\n                      <Button\n                        key={index}\n                        title={option}\n                        onClick={() =>\n                          handleSelectOption(\n                            option,\n                            questions[currentQuestionIndex].correct_answer\n                          )\n                        }\n                        active={selectOption === option}\n                      />\n                    </>\n                  ))}\n                </div>\n                {currentQuestionIndex === questions.length - 1 ? (\n                  <Button title='Submit Quiz' onClick={handleCompletedPage} />\n                ) : (\n                  <Button title='Next Question' onClick={handleNextQuestion} />\n                )}\n              </div>\n              <div className='bottom-container'>\n                {selectOption ? (\n                  <p className='selected-option'>{`You have selected ${selectOption}`}</p>\n                ) : (\n                  message && <p className='error-selected-message'>{message}</p>\n                )}\n\n                <p className='out-of-questions'>{`${\n                  currentQuestionIndex + 1\n                }/5 questions`}</p>\n              </div>\n            </div>\n          </div>\n        )\n      )}\n    </div>\n  )\n}\n\nexport default Questions\n"],"names":["_ref","title","onClick","dataCy","active","_jsx","className","concat","children","Oval","visible","height","width","color","secondaryColor","ariaLabel","_useState","useState","_useState2","_slicedToArray","questions","setQuestions","_useState3","_useState4","loading","setLoading","_useState5","_useState6","selectOption","setSelectOption","_useState7","_useState8","currentQuestionIndex","setCurrentQuestionIndex","_useState9","_useState10","shuffledOptions","setShuffledOptions","_useState11","_useState12","message","setMessage","_useState13","_useState14","timer","setTimer","selectedCategory","useSelector","state","questionSlice","difficulty","selectedDifficulty","score","navigate","useNavigate","dispatch","useDispatch","fetchQuestions","_asyncToGenerator","_regeneratorRuntime","mark","_callee","retryCount","response","retryAfter","delay","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","id","sent","status","headers","get","parseInt","setTimeout","console","error","abrupt","json","results","t0","stop","apply","useEffect","shuffled","shuffleQuestions","correct_answer","incorrect_answers","correctAnswer","incorrectAnswer","_toConsumableArray","sort","Math","random","timerId","setInterval","prevTime","clearInterval","Spinner","_jsxs","question","map","option","index","_Fragment","Button","setScore","handleSelectOption"],"sourceRoot":""}