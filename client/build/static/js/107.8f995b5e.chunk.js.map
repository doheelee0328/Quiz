{"version":3,"file":"static/js/107.8f995b5e.chunk.js","mappings":"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","sources":["components/Buttons.tsx","pages/Login.tsx","socket/index.ts"],"sourcesContent":["import React from 'react'\nimport '../scss/main.scss'\n\ninterface ButtonProps {\n  title: string\n  onClick?: () => void\n  dataCy?: string\n  active?: boolean\n}\n\nconst Button = ({ title, onClick, dataCy, active }: ButtonProps) => {\n  return (\n    <button\n      className={`character-button ${active ? 'active' : ''}`}\n      onClick={onClick}\n      data-cy={dataCy}\n    >\n      {title}\n    </button>\n  )\n}\n\nexport default Button\n","import React, { useRef, useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { changeCharacter } from '../slices/character'\nimport { gamingRoom, setHostName, setNickname } from '../slices/player'\nimport '../scss/main.scss'\nimport Button from '../components/Buttons'\nimport { useNavigate } from 'react-router-dom'\nimport { socket } from '../socket/index'\nimport { setPlayersInRoom } from '../slices/player'\nimport { setSelectedCategory, setSelectedDifficulty } from '../slices/questions'\n\n// use redux to use the nickname and room\nconst Login = () => {\n  const inputNicknameRef = useRef<HTMLInputElement>(null)\n  const [message, setMessage] = useState<string>('')\n  const [playerName, setPlayerName] = useState('')\n\n  // const [roomName, setRoomName] = useState('')\n  const dispatch = useDispatch()\n  // redux\n  const selectedCharacter = useSelector(\n    (state: any) => state.characterSlice.character\n  )\n  const selectedRoom = useSelector((state: any) => state.playerSlice.gamingRoom)\n\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    if (inputNicknameRef.current) {\n      inputNicknameRef.current.focus()\n    }\n\n    const storedCharacter = localStorage.getItem('character-image')\n    if (storedCharacter) {\n      dispatch(changeCharacter(storedCharacter))\n    }\n\n    socket.on('update-players', (players: string[]) => {\n      dispatch(setPlayersInRoom(players))\n    })\n    return () => {\n      socket.off('update-players')\n    }\n  }, [dispatch, selectedCharacter])\n\n  const joinRoomHandler = () => {\n    if (!selectedRoom || !playerName) {\n      setMessage(\n        'Please enter your nickname and the existing room to join the game'\n      )\n      return\n    }\n\n    socket.emit('join-room', selectedRoom, playerName, (roomExist: boolean) => {\n      if (roomExist) {\n        navigate('/lobby')\n        dispatch(setNickname(playerName))\n      } else {\n        setMessage(`The room ${selectedRoom} does not exist`)\n      }\n    })\n  }\n  const joinNewGameHandler = () => {\n    if (!playerName && !selectedRoom) {\n      setMessage('Please enter your username and room to create a quiz')\n      return\n    } else {\n      dispatch(setNickname(playerName))\n      // set the nickname to the player name\n\n      socket.emit(\n        'create-room',\n        selectedRoom,\n        playerName,\n        (room: string | boolean) => {\n          // callback function that provides the name of the room\n          if (typeof room === 'string') {\n            navigate('/game-room')\n            dispatch(setSelectedCategory(''))\n            dispatch(setSelectedDifficulty(''))\n            dispatch(setHostName(playerName)) // Dispatch setHostName after setting playerName\n          } else {\n            setMessage('The room already exists, please try again')\n          }\n        }\n      )\n    }\n  }\n\n  return (\n    <div className='login-container'>\n      {/* <Logo /> */}\n      {selectedCharacter && (\n        <img\n          src={selectedCharacter}\n          alt='selected-character'\n          className='selected-character'\n          data-cy='selected-character'\n        />\n      )}\n      <p className='nickname' data-cy='nickname'>\n        Username\n      </p>\n      <input\n        type='text'\n        ref={inputNicknameRef}\n        className='input'\n        data-cy='input'\n        onChange={(e) => setPlayerName(e.target.value)}\n        value={playerName}\n      />\n      <p className='nickname' data-cy='nickname'>\n        Room\n      </p>\n      <input\n        type='text'\n        className='input'\n        data-cy='input'\n        onChange={(e) => dispatch(gamingRoom(e.target.value))}\n        value={selectedRoom}\n      />\n\n      <div className='start-game-container'>\n        <Button title='Create Room' onClick={joinNewGameHandler} />\n        <Button\n          title='Join Game'\n          onClick={joinRoomHandler}\n          dataCy='join-button'\n        />\n      </div>\n\n      {message && <p className='not-entered-message'>{message}</p>}\n    </div>\n  )\n}\n\nexport default Login\n","import io from 'socket.io-client'\nconst serverEndpoint = 'https://quiz-socket-backend.onrender.com'\nconst socket = io(serverEndpoint)\n\nexport { socket }\n"],"names":["_ref","title","onClick","dataCy","active","_jsx","className","concat","children","inputNicknameRef","useRef","_useState","useState","_useState2","_slicedToArray","message","setMessage","_useState3","_useState4","playerName","setPlayerName","dispatch","useDispatch","selectedCharacter","useSelector","state","characterSlice","character","selectedRoom","playerSlice","gamingRoom","navigate","useNavigate","useEffect","current","focus","storedCharacter","localStorage","getItem","changeCharacter","socket","on","players","setPlayersInRoom","off","_jsxs","src","alt","type","ref","onChange","e","target","value","Button","setNickname","emit","room","setSelectedCategory","setSelectedDifficulty","setHostName","roomExist","io"],"sourceRoot":""}